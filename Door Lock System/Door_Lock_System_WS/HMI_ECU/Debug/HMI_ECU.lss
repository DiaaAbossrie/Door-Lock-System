
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d8  00800060  00003a92  00003b26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800138  00800138  00003bfe  2**0
                  ALLOC
  3 .stab         00003120  00000000  00000000  00003c00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000122c  00000000  00000000  00006d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000081fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009e45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ad30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bc40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000becd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c69b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 33       	cpi	r26, 0x38	; 56
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e3       	ldi	r26, 0x38	; 56
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 34       	cpi	r26, 0x41	; 65
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 aa 11 	call	0x2354	; 0x2354 <main>
      8a:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cb 1c 	jmp	0x3996	; 0x3996 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e2       	ldi	r26, 0x23	; 35
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cb 1c 	jmp	0x3996	; 0x3996 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e2       	ldi	r24, 0x23	; 35
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 db 1c 	jmp	0x39b6	; 0x39b6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f7 1c 	jmp	0x39ee	; 0x39ee <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)){
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/*
		 * Do Nothing
		 */
	}else{
		switch(port_num){
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if(value == LOGIC_HIGH){
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTA, pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH){
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTB, pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH){
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTC, pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH){
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTD, pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	00 d0       	rcall	.+0      	; 0xefc <GPIO_readPin+0xa>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)){
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	88 30       	cpi	r24, 0x08	; 8
     f08:	18 f4       	brcc	.+6      	; 0xf10 <GPIO_readPin+0x1e>
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	84 30       	cpi	r24, 0x04	; 4
     f0e:	10 f0       	brcs	.+4      	; 0xf14 <GPIO_readPin+0x22>
		return LOGIC_LOW;
     f10:	1d 82       	std	Y+5, r1	; 0x05
     f12:	82 c0       	rjmp	.+260    	; 0x1018 <GPIO_readPin+0x126>
	}else{
		switch (port_num){
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	3c 83       	std	Y+4, r19	; 0x04
     f1c:	2b 83       	std	Y+3, r18	; 0x03
     f1e:	4b 81       	ldd	r20, Y+3	; 0x03
     f20:	5c 81       	ldd	r21, Y+4	; 0x04
     f22:	41 30       	cpi	r20, 0x01	; 1
     f24:	51 05       	cpc	r21, r1
     f26:	79 f1       	breq	.+94     	; 0xf86 <GPIO_readPin+0x94>
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	9c 81       	ldd	r25, Y+4	; 0x04
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	91 05       	cpc	r25, r1
     f30:	34 f4       	brge	.+12     	; 0xf3e <GPIO_readPin+0x4c>
     f32:	2b 81       	ldd	r18, Y+3	; 0x03
     f34:	3c 81       	ldd	r19, Y+4	; 0x04
     f36:	21 15       	cp	r18, r1
     f38:	31 05       	cpc	r19, r1
     f3a:	69 f0       	breq	.+26     	; 0xf56 <GPIO_readPin+0x64>
     f3c:	6c c0       	rjmp	.+216    	; 0x1016 <GPIO_readPin+0x124>
     f3e:	4b 81       	ldd	r20, Y+3	; 0x03
     f40:	5c 81       	ldd	r21, Y+4	; 0x04
     f42:	42 30       	cpi	r20, 0x02	; 2
     f44:	51 05       	cpc	r21, r1
     f46:	b9 f1       	breq	.+110    	; 0xfb6 <GPIO_readPin+0xc4>
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	9c 81       	ldd	r25, Y+4	; 0x04
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	91 05       	cpc	r25, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <GPIO_readPin+0x62>
     f52:	49 c0       	rjmp	.+146    	; 0xfe6 <GPIO_readPin+0xf4>
     f54:	60 c0       	rjmp	.+192    	; 0x1016 <GPIO_readPin+0x124>
		case PORTA_ID:
			if(BIT_IS_SET(PINA, pin_num)){
     f56:	e9 e3       	ldi	r30, 0x39	; 57
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a9 01       	movw	r20, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <GPIO_readPin+0x7c>
     f6a:	55 95       	asr	r21
     f6c:	47 95       	ror	r20
     f6e:	8a 95       	dec	r24
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <GPIO_readPin+0x78>
     f72:	ca 01       	movw	r24, r20
     f74:	81 70       	andi	r24, 0x01	; 1
     f76:	90 70       	andi	r25, 0x00	; 0
     f78:	88 23       	and	r24, r24
     f7a:	19 f0       	breq	.+6      	; 0xf82 <GPIO_readPin+0x90>
				return LOGIC_HIGH;
     f7c:	51 e0       	ldi	r21, 0x01	; 1
     f7e:	5d 83       	std	Y+5, r21	; 0x05
     f80:	4b c0       	rjmp	.+150    	; 0x1018 <GPIO_readPin+0x126>
			}else{
				return LOGIC_LOW;
     f82:	1d 82       	std	Y+5, r1	; 0x05
     f84:	49 c0       	rjmp	.+146    	; 0x1018 <GPIO_readPin+0x126>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB, pin_num)){
     f86:	e6 e3       	ldi	r30, 0x36	; 54
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	a9 01       	movw	r20, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <GPIO_readPin+0xac>
     f9a:	55 95       	asr	r21
     f9c:	47 95       	ror	r20
     f9e:	8a 95       	dec	r24
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <GPIO_readPin+0xa8>
     fa2:	ca 01       	movw	r24, r20
     fa4:	81 70       	andi	r24, 0x01	; 1
     fa6:	90 70       	andi	r25, 0x00	; 0
     fa8:	88 23       	and	r24, r24
     faa:	19 f0       	breq	.+6      	; 0xfb2 <GPIO_readPin+0xc0>
				return LOGIC_HIGH;
     fac:	51 e0       	ldi	r21, 0x01	; 1
     fae:	5d 83       	std	Y+5, r21	; 0x05
     fb0:	33 c0       	rjmp	.+102    	; 0x1018 <GPIO_readPin+0x126>
			}else{
				return LOGIC_LOW;
     fb2:	1d 82       	std	Y+5, r1	; 0x05
     fb4:	31 c0       	rjmp	.+98     	; 0x1018 <GPIO_readPin+0x126>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC, pin_num)){
     fb6:	e3 e3       	ldi	r30, 0x33	; 51
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	a9 01       	movw	r20, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <GPIO_readPin+0xdc>
     fca:	55 95       	asr	r21
     fcc:	47 95       	ror	r20
     fce:	8a 95       	dec	r24
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <GPIO_readPin+0xd8>
     fd2:	ca 01       	movw	r24, r20
     fd4:	81 70       	andi	r24, 0x01	; 1
     fd6:	90 70       	andi	r25, 0x00	; 0
     fd8:	88 23       	and	r24, r24
     fda:	19 f0       	breq	.+6      	; 0xfe2 <GPIO_readPin+0xf0>
				return LOGIC_HIGH;
     fdc:	51 e0       	ldi	r21, 0x01	; 1
     fde:	5d 83       	std	Y+5, r21	; 0x05
     fe0:	1b c0       	rjmp	.+54     	; 0x1018 <GPIO_readPin+0x126>
			}else{
				return LOGIC_LOW;
     fe2:	1d 82       	std	Y+5, r1	; 0x05
     fe4:	19 c0       	rjmp	.+50     	; 0x1018 <GPIO_readPin+0x126>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND, pin_num)){
     fe6:	e0 e3       	ldi	r30, 0x30	; 48
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a9 01       	movw	r20, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <GPIO_readPin+0x10c>
     ffa:	55 95       	asr	r21
     ffc:	47 95       	ror	r20
     ffe:	8a 95       	dec	r24
    1000:	e2 f7       	brpl	.-8      	; 0xffa <GPIO_readPin+0x108>
    1002:	ca 01       	movw	r24, r20
    1004:	81 70       	andi	r24, 0x01	; 1
    1006:	90 70       	andi	r25, 0x00	; 0
    1008:	88 23       	and	r24, r24
    100a:	19 f0       	breq	.+6      	; 0x1012 <GPIO_readPin+0x120>
				return LOGIC_HIGH;
    100c:	51 e0       	ldi	r21, 0x01	; 1
    100e:	5d 83       	std	Y+5, r21	; 0x05
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <GPIO_readPin+0x126>
			}else{
				return LOGIC_LOW;
    1012:	1d 82       	std	Y+5, r1	; 0x05
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <GPIO_readPin+0x126>
    1016:	02 c0       	rjmp	.+4      	; 0x101c <GPIO_readPin+0x12a>
			}
			break;
	}
}
}
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	8e 83       	std	Y+6, r24	; 0x06
    101c:	8e 81       	ldd	r24, Y+6	; 0x06
    101e:	26 96       	adiw	r28, 0x06	; 6
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <GPIO_setupPortDirection+0x6>
    1036:	00 d0       	rcall	.+0      	; 0x1038 <GPIO_setupPortDirection+0x8>
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	84 30       	cpi	r24, 0x04	; 4
    1044:	90 f5       	brcc	.+100    	; 0x10aa <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	3c 83       	std	Y+4, r19	; 0x04
    104e:	2b 83       	std	Y+3, r18	; 0x03
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	91 05       	cpc	r25, r1
    1058:	d1 f0       	breq	.+52     	; 0x108e <GPIO_setupPortDirection+0x5e>
    105a:	2b 81       	ldd	r18, Y+3	; 0x03
    105c:	3c 81       	ldd	r19, Y+4	; 0x04
    105e:	22 30       	cpi	r18, 0x02	; 2
    1060:	31 05       	cpc	r19, r1
    1062:	2c f4       	brge	.+10     	; 0x106e <GPIO_setupPortDirection+0x3e>
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	61 f0       	breq	.+24     	; 0x1084 <GPIO_setupPortDirection+0x54>
    106c:	1e c0       	rjmp	.+60     	; 0x10aa <GPIO_setupPortDirection+0x7a>
    106e:	2b 81       	ldd	r18, Y+3	; 0x03
    1070:	3c 81       	ldd	r19, Y+4	; 0x04
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	81 f0       	breq	.+32     	; 0x1098 <GPIO_setupPortDirection+0x68>
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	91 05       	cpc	r25, r1
    1080:	81 f0       	breq	.+32     	; 0x10a2 <GPIO_setupPortDirection+0x72>
    1082:	13 c0       	rjmp	.+38     	; 0x10aa <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1084:	ea e3       	ldi	r30, 0x3A	; 58
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	80 83       	st	Z, r24
    108c:	0e c0       	rjmp	.+28     	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    108e:	e7 e3       	ldi	r30, 0x37	; 55
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	80 83       	st	Z, r24
    1096:	09 c0       	rjmp	.+18     	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1098:	e4 e3       	ldi	r30, 0x34	; 52
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	80 83       	st	Z, r24
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    10a2:	e1 e3       	ldi	r30, 0x31	; 49
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	80 83       	st	Z, r24
			break;
		}
	}
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <GPIO_writePort+0x6>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <GPIO_writePort+0x8>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS){
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	84 30       	cpi	r24, 0x04	; 4
    10cc:	90 f5       	brcc	.+100    	; 0x1132 <GPIO_writePort+0x7a>
		/*Do Nothing*/
	}else{
		switch (port_num){
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	3c 83       	std	Y+4, r19	; 0x04
    10d6:	2b 83       	std	Y+3, r18	; 0x03
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	91 05       	cpc	r25, r1
    10e0:	d1 f0       	breq	.+52     	; 0x1116 <GPIO_writePort+0x5e>
    10e2:	2b 81       	ldd	r18, Y+3	; 0x03
    10e4:	3c 81       	ldd	r19, Y+4	; 0x04
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	31 05       	cpc	r19, r1
    10ea:	2c f4       	brge	.+10     	; 0x10f6 <GPIO_writePort+0x3e>
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	61 f0       	breq	.+24     	; 0x110c <GPIO_writePort+0x54>
    10f4:	1e c0       	rjmp	.+60     	; 0x1132 <GPIO_writePort+0x7a>
    10f6:	2b 81       	ldd	r18, Y+3	; 0x03
    10f8:	3c 81       	ldd	r19, Y+4	; 0x04
    10fa:	22 30       	cpi	r18, 0x02	; 2
    10fc:	31 05       	cpc	r19, r1
    10fe:	81 f0       	breq	.+32     	; 0x1120 <GPIO_writePort+0x68>
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	91 05       	cpc	r25, r1
    1108:	81 f0       	breq	.+32     	; 0x112a <GPIO_writePort+0x72>
    110a:	13 c0       	rjmp	.+38     	; 0x1132 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    110c:	eb e3       	ldi	r30, 0x3B	; 59
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	80 83       	st	Z, r24
    1114:	0e c0       	rjmp	.+28     	; 0x1132 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1116:	e8 e3       	ldi	r30, 0x38	; 56
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	80 83       	st	Z, r24
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1120:	e5 e3       	ldi	r30, 0x35	; 53
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	80 83       	st	Z, r24
    1128:	04 c0       	rjmp	.+8      	; 0x1132 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    112a:	e2 e3       	ldi	r30, 0x32	; 50
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	80 83       	st	Z, r24
			break;
		}
	}
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <GPIO_readPort+0x6>
    1146:	00 d0       	rcall	.+0      	; 0x1148 <GPIO_readPort+0x8>
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS){
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	84 30       	cpi	r24, 0x04	; 4
    1154:	10 f0       	brcs	.+4      	; 0x115a <GPIO_readPort+0x1a>
		return LOGIC_LOW;
    1156:	1c 82       	std	Y+4, r1	; 0x04
    1158:	34 c0       	rjmp	.+104    	; 0x11c2 <GPIO_readPort+0x82>
	}else{
		switch (port_num){
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	3b 83       	std	Y+3, r19	; 0x03
    1162:	2a 83       	std	Y+2, r18	; 0x02
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	9b 81       	ldd	r25, Y+3	; 0x03
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	91 05       	cpc	r25, r1
    116c:	d1 f0       	breq	.+52     	; 0x11a2 <GPIO_readPort+0x62>
    116e:	2a 81       	ldd	r18, Y+2	; 0x02
    1170:	3b 81       	ldd	r19, Y+3	; 0x03
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	2c f4       	brge	.+10     	; 0x1182 <GPIO_readPort+0x42>
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	9b 81       	ldd	r25, Y+3	; 0x03
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	61 f0       	breq	.+24     	; 0x1198 <GPIO_readPort+0x58>
    1180:	1f c0       	rjmp	.+62     	; 0x11c0 <GPIO_readPort+0x80>
    1182:	2a 81       	ldd	r18, Y+2	; 0x02
    1184:	3b 81       	ldd	r19, Y+3	; 0x03
    1186:	22 30       	cpi	r18, 0x02	; 2
    1188:	31 05       	cpc	r19, r1
    118a:	81 f0       	breq	.+32     	; 0x11ac <GPIO_readPort+0x6c>
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	9b 81       	ldd	r25, Y+3	; 0x03
    1190:	83 30       	cpi	r24, 0x03	; 3
    1192:	91 05       	cpc	r25, r1
    1194:	81 f0       	breq	.+32     	; 0x11b6 <GPIO_readPort+0x76>
    1196:	14 c0       	rjmp	.+40     	; 0x11c0 <GPIO_readPort+0x80>
		case PORTA_ID:
			return PINA;
    1198:	e9 e3       	ldi	r30, 0x39	; 57
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	90 81       	ld	r25, Z
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	10 c0       	rjmp	.+32     	; 0x11c2 <GPIO_readPort+0x82>
			break;
		case PORTB_ID:
			return PINB;
    11a2:	e6 e3       	ldi	r30, 0x36	; 54
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	20 81       	ld	r18, Z
    11a8:	2c 83       	std	Y+4, r18	; 0x04
    11aa:	0b c0       	rjmp	.+22     	; 0x11c2 <GPIO_readPort+0x82>
			break;
		case PORTC_ID:
			return PINC;
    11ac:	e3 e3       	ldi	r30, 0x33	; 51
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	30 81       	ld	r19, Z
    11b2:	3c 83       	std	Y+4, r19	; 0x04
    11b4:	06 c0       	rjmp	.+12     	; 0x11c2 <GPIO_readPort+0x82>
			break;
		case PORTD_ID:
			return PIND;
    11b6:	e0 e3       	ldi	r30, 0x30	; 48
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	8c 83       	std	Y+4, r24	; 0x04
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <GPIO_readPort+0x82>
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <GPIO_readPort+0x86>
			break;
		}
	}
}
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	9d 83       	std	Y+5, r25	; 0x05
    11c6:	8d 81       	ldd	r24, Y+5	; 0x05
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <Timer1_init>:

/*
 * Description:
 * Initialize TIMER1 with the specified configurations.
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <Timer1_init+0x6>
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	9a 83       	std	Y+2, r25	; 0x02
    11e4:	89 83       	std	Y+1, r24	; 0x01
    /* Set initial value for Timer1 counter */
    TCNT1 = Config_Ptr -> initial_value;
    11e6:	ac e4       	ldi	r26, 0x4C	; 76
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e9 81       	ldd	r30, Y+1	; 0x01
    11ec:	fa 81       	ldd	r31, Y+2	; 0x02
    11ee:	80 81       	ld	r24, Z
    11f0:	91 81       	ldd	r25, Z+1	; 0x01
    11f2:	11 96       	adiw	r26, 0x01	; 1
    11f4:	9c 93       	st	X, r25
    11f6:	8e 93       	st	-X, r24

    /* Set compare value for Timer1 */
    OCR1A = Config_Ptr -> compare_value;
    11f8:	aa e4       	ldi	r26, 0x4A	; 74
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e9 81       	ldd	r30, Y+1	; 0x01
    11fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1200:	82 81       	ldd	r24, Z+2	; 0x02
    1202:	93 81       	ldd	r25, Z+3	; 0x03
    1204:	11 96       	adiw	r26, 0x01	; 1
    1206:	9c 93       	st	X, r25
    1208:	8e 93       	st	-X, r24

    /* Configure Timer1 mode (WGM10, WGM11 bits) */
    TCCR1A &= 0xFC;
    120a:	af e4       	ldi	r26, 0x4F	; 79
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	ef e4       	ldi	r30, 0x4F	; 79
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	8c 7f       	andi	r24, 0xFC	; 252
    1216:	8c 93       	st	X, r24
    TCCR1A |= (Config_Ptr -> mode) & 0x04;
    1218:	af e4       	ldi	r26, 0x4F	; 79
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	ef e4       	ldi	r30, 0x4F	; 79
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	98 2f       	mov	r25, r24
    1224:	e9 81       	ldd	r30, Y+1	; 0x01
    1226:	fa 81       	ldd	r31, Y+2	; 0x02
    1228:	85 81       	ldd	r24, Z+5	; 0x05
    122a:	84 70       	andi	r24, 0x04	; 4
    122c:	89 2b       	or	r24, r25
    122e:	8c 93       	st	X, r24

    /* Configure Timer1 mode (WGM12, WGM13 bits) and Prescaler (CS10, CS11, CS12 bits) */
    TCCR1B &= 0xE7;
    1230:	ae e4       	ldi	r26, 0x4E	; 78
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	ee e4       	ldi	r30, 0x4E	; 78
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	87 7e       	andi	r24, 0xE7	; 231
    123c:	8c 93       	st	X, r24
    TCCR1B |= ((Config_Ptr -> mode) << 1) & 0x18;
    123e:	ae e4       	ldi	r26, 0x4E	; 78
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	ee e4       	ldi	r30, 0x4E	; 78
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	28 2f       	mov	r18, r24
    124a:	e9 81       	ldd	r30, Y+1	; 0x01
    124c:	fa 81       	ldd	r31, Y+2	; 0x02
    124e:	85 81       	ldd	r24, Z+5	; 0x05
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	88 71       	andi	r24, 0x18	; 24
    125a:	82 2b       	or	r24, r18
    125c:	8c 93       	st	X, r24
    TCCR1B &= 0xF8;
    125e:	ae e4       	ldi	r26, 0x4E	; 78
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	ee e4       	ldi	r30, 0x4E	; 78
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	88 7f       	andi	r24, 0xF8	; 248
    126a:	8c 93       	st	X, r24
    TCCR1B |= (Config_Ptr -> prescaler) & 0x07;
    126c:	ae e4       	ldi	r26, 0x4E	; 78
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	ee e4       	ldi	r30, 0x4E	; 78
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	98 2f       	mov	r25, r24
    1278:	e9 81       	ldd	r30, Y+1	; 0x01
    127a:	fa 81       	ldd	r31, Y+2	; 0x02
    127c:	84 81       	ldd	r24, Z+4	; 0x04
    127e:	87 70       	andi	r24, 0x07	; 7
    1280:	89 2b       	or	r24, r25
    1282:	8c 93       	st	X, r24

    /* Enable the Timer1 compare interrupt and overflow interrupt */
    TIMSK |= (1<<OCIE1A) | (1<<TOIE1);
    1284:	a9 e5       	ldi	r26, 0x59	; 89
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e9 e5       	ldi	r30, 0x59	; 89
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	84 61       	ori	r24, 0x14	; 20
    1290:	8c 93       	st	X, r24
}
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <Timer1_deinit>:

/*
 * Description:
 * Deinitialize TIMER1 by setting its control registers to zero.
 */
void Timer1_deinit(void){
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    TCCR1B = 0x00;
    12a4:	ee e4       	ldi	r30, 0x4E	; 78
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	10 82       	st	Z, r1
    TIMSK &= 0xEB;
    12aa:	a9 e5       	ldi	r26, 0x59	; 89
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e9 e5       	ldi	r30, 0x59	; 89
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	8b 7e       	andi	r24, 0xEB	; 235
    12b6:	8c 93       	st	X, r24
}
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	08 95       	ret

000012be <Timer1_setCallBack>:

/*
 * Description:
 * Set the callback function for TIMER1.
 */
void Timer1_setCallBack(void (*a_ptr)(void)){
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <Timer1_setCallBack+0x6>
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	9a 83       	std	Y+2, r25	; 0x02
    12ca:	89 83       	std	Y+1, r24	; 0x01
    Timer1_CallBack_Ptr = a_ptr;
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	9a 81       	ldd	r25, Y+2	; 0x02
    12d0:	90 93 39 01 	sts	0x0139, r25
    12d4:	80 93 38 01 	sts	0x0138, r24
}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <__vector_7>:

/* Interrupt Service Routine for Timer1 Compare Match A */
ISR(TIMER1_COMPA_vect){
    12e2:	1f 92       	push	r1
    12e4:	0f 92       	push	r0
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	0f 92       	push	r0
    12ea:	11 24       	eor	r1, r1
    12ec:	2f 93       	push	r18
    12ee:	3f 93       	push	r19
    12f0:	4f 93       	push	r20
    12f2:	5f 93       	push	r21
    12f4:	6f 93       	push	r22
    12f6:	7f 93       	push	r23
    12f8:	8f 93       	push	r24
    12fa:	9f 93       	push	r25
    12fc:	af 93       	push	r26
    12fe:	bf 93       	push	r27
    1300:	ef 93       	push	r30
    1302:	ff 93       	push	r31
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    (*Timer1_CallBack_Ptr)();
    130c:	e0 91 38 01 	lds	r30, 0x0138
    1310:	f0 91 39 01 	lds	r31, 0x0139
    1314:	09 95       	icall
}
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	ff 91       	pop	r31
    131c:	ef 91       	pop	r30
    131e:	bf 91       	pop	r27
    1320:	af 91       	pop	r26
    1322:	9f 91       	pop	r25
    1324:	8f 91       	pop	r24
    1326:	7f 91       	pop	r23
    1328:	6f 91       	pop	r22
    132a:	5f 91       	pop	r21
    132c:	4f 91       	pop	r20
    132e:	3f 91       	pop	r19
    1330:	2f 91       	pop	r18
    1332:	0f 90       	pop	r0
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	0f 90       	pop	r0
    1338:	1f 90       	pop	r1
    133a:	18 95       	reti

0000133c <__vector_9>:

/* Interrupt Service Routine for Timer1 Overflow */
ISR(TIMER1_OVF_vect){
    133c:	1f 92       	push	r1
    133e:	0f 92       	push	r0
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	0f 92       	push	r0
    1344:	11 24       	eor	r1, r1
    1346:	2f 93       	push	r18
    1348:	3f 93       	push	r19
    134a:	4f 93       	push	r20
    134c:	5f 93       	push	r21
    134e:	6f 93       	push	r22
    1350:	7f 93       	push	r23
    1352:	8f 93       	push	r24
    1354:	9f 93       	push	r25
    1356:	af 93       	push	r26
    1358:	bf 93       	push	r27
    135a:	ef 93       	push	r30
    135c:	ff 93       	push	r31
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    (*Timer1_CallBack_Ptr)();
    1366:	e0 91 38 01 	lds	r30, 0x0138
    136a:	f0 91 39 01 	lds	r31, 0x0139
    136e:	09 95       	icall
}
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	ff 91       	pop	r31
    1376:	ef 91       	pop	r30
    1378:	bf 91       	pop	r27
    137a:	af 91       	pop	r26
    137c:	9f 91       	pop	r25
    137e:	8f 91       	pop	r24
    1380:	7f 91       	pop	r23
    1382:	6f 91       	pop	r22
    1384:	5f 91       	pop	r21
    1386:	4f 91       	pop	r20
    1388:	3f 91       	pop	r19
    138a:	2f 91       	pop	r18
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	0f 90       	pop	r0
    1392:	1f 90       	pop	r1
    1394:	18 95       	reti

00001396 <UART_init>:
 * Function responsible for initializing the UART device. It sets up the frame format
 * including the number of data bits, parity bit type, and number of stop bits.
 * It also enables the UART and sets the baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	00 d0       	rcall	.+0      	; 0x139c <UART_init+0x6>
    139c:	00 d0       	rcall	.+0      	; 0x139e <UART_init+0x8>
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	9c 83       	std	Y+4, r25	; 0x04
    13a4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    13a6:	1a 82       	std	Y+2, r1	; 0x02
    13a8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    13aa:	eb e2       	ldi	r30, 0x2B	; 43
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	80 83       	st	Z, r24

	// Configure UCSRB register
	UCSRB = (1<<RXEN) | (1<<TXEN); // Enable Receiver and Transmitter
    13b2:	ea e2       	ldi	r30, 0x2A	; 42
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	88 e1       	ldi	r24, 0x18	; 24
    13b8:	80 83       	st	Z, r24

	// Configure UCSRC register
	UCSRC = (1<<URSEL); // Set URSEL to write to UCSRC
    13ba:	e0 e4       	ldi	r30, 0x40	; 64
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 e8       	ldi	r24, 0x80	; 128
    13c0:	80 83       	st	Z, r24
	UCSRC &= 0xCF; // Clear previous bits related to parity
    13c2:	a0 e4       	ldi	r26, 0x40	; 64
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e0 e4       	ldi	r30, 0x40	; 64
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8f 7c       	andi	r24, 0xCF	; 207
    13ce:	8c 93       	st	X, r24
	UCSRC |= ((Config_Ptr -> parity) << 4) & 0x30; // Set parity type
    13d0:	a0 e4       	ldi	r26, 0x40	; 64
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e0 e4       	ldi	r30, 0x40	; 64
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	28 2f       	mov	r18, r24
    13dc:	eb 81       	ldd	r30, Y+3	; 0x03
    13de:	fc 81       	ldd	r31, Y+4	; 0x04
    13e0:	81 81       	ldd	r24, Z+1	; 0x01
    13e2:	88 2f       	mov	r24, r24
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	82 95       	swap	r24
    13e8:	92 95       	swap	r25
    13ea:	90 7f       	andi	r25, 0xF0	; 240
    13ec:	98 27       	eor	r25, r24
    13ee:	80 7f       	andi	r24, 0xF0	; 240
    13f0:	98 27       	eor	r25, r24
    13f2:	80 73       	andi	r24, 0x30	; 48
    13f4:	82 2b       	or	r24, r18
    13f6:	8c 93       	st	X, r24
	UCSRC &= 0xF7; // Clear previous bits related to stop bits
    13f8:	a0 e4       	ldi	r26, 0x40	; 64
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e0 e4       	ldi	r30, 0x40	; 64
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	87 7f       	andi	r24, 0xF7	; 247
    1404:	8c 93       	st	X, r24
	UCSRC |= ((Config_Ptr -> stop_bit) << 3) & 0x08; // Set stop bits
    1406:	a0 e4       	ldi	r26, 0x40	; 64
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e0 e4       	ldi	r30, 0x40	; 64
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	28 2f       	mov	r18, r24
    1412:	eb 81       	ldd	r30, Y+3	; 0x03
    1414:	fc 81       	ldd	r31, Y+4	; 0x04
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	88 2f       	mov	r24, r24
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	88 70       	andi	r24, 0x08	; 8
    142a:	82 2b       	or	r24, r18
    142c:	8c 93       	st	X, r24
	UCSRC &= 0xF9; // Clear previous bits related to data bits
    142e:	a0 e4       	ldi	r26, 0x40	; 64
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e0 e4       	ldi	r30, 0x40	; 64
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	89 7f       	andi	r24, 0xF9	; 249
    143a:	8c 93       	st	X, r24
	UCSRC |= ((Config_Ptr -> bit_data) << 1) & 0x06; // Set data bits
    143c:	a0 e4       	ldi	r26, 0x40	; 64
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e0 e4       	ldi	r30, 0x40	; 64
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	28 2f       	mov	r18, r24
    1448:	eb 81       	ldd	r30, Y+3	; 0x03
    144a:	fc 81       	ldd	r31, Y+4	; 0x04
    144c:	80 81       	ld	r24, Z
    144e:	88 2f       	mov	r24, r24
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	86 70       	andi	r24, 0x06	; 6
    1458:	82 2b       	or	r24, r18
    145a:	8c 93       	st	X, r24

	// Calculate the UBRR register value
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr -> baud_rate) * 8UL))) - 1);
    145c:	eb 81       	ldd	r30, Y+3	; 0x03
    145e:	fc 81       	ldd	r31, Y+4	; 0x04
    1460:	83 81       	ldd	r24, Z+3	; 0x03
    1462:	94 81       	ldd	r25, Z+4	; 0x04
    1464:	a5 81       	ldd	r26, Z+5	; 0x05
    1466:	b6 81       	ldd	r27, Z+6	; 0x06
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	aa 1f       	adc	r26, r26
    146e:	bb 1f       	adc	r27, r27
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	aa 1f       	adc	r26, r26
    1476:	bb 1f       	adc	r27, r27
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	aa 1f       	adc	r26, r26
    147e:	bb 1f       	adc	r27, r27
    1480:	9c 01       	movw	r18, r24
    1482:	ad 01       	movw	r20, r26
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	92 e1       	ldi	r25, 0x12	; 18
    1488:	aa e7       	ldi	r26, 0x7A	; 122
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	bc 01       	movw	r22, r24
    148e:	cd 01       	movw	r24, r26
    1490:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__udivmodsi4>
    1494:	da 01       	movw	r26, r20
    1496:	c9 01       	movw	r24, r18
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	9a 83       	std	Y+2, r25	; 0x02
    149c:	89 83       	std	Y+1, r24	; 0x01

	// Set UBRRH and UBRRL registers
	UBRRH = ubrr_value >> 8;
    149e:	e0 e4       	ldi	r30, 0x40	; 64
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	9a 81       	ldd	r25, Y+2	; 0x02
    14a6:	89 2f       	mov	r24, r25
    14a8:	99 27       	eor	r25, r25
    14aa:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    14ac:	e9 e2       	ldi	r30, 0x29	; 41
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	80 83       	st	Z, r24
}
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <UART_sendByte>:
 * Function responsible for sending a byte to another UART device.
 * It waits until the UART Data Register Empty (UDRE) flag is set and
 * then puts the data in the UDR register.
 */
void UART_sendByte(const uint8 data)
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	0f 92       	push	r0
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){} // Wait until UDRE flag is set
    14ce:	eb e2       	ldi	r30, 0x2B	; 43
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	88 2f       	mov	r24, r24
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	80 72       	andi	r24, 0x20	; 32
    14da:	90 70       	andi	r25, 0x00	; 0
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	b9 f3       	breq	.-18     	; 0x14ce <UART_sendByte+0xc>
	UDR = data; // Put the data in UDR
    14e0:	ec e2       	ldi	r30, 0x2C	; 44
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	80 83       	st	Z, r24
}
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <UART_recieveByte>:
 * Function responsible for receiving a byte from another UART device.
 * It waits until the UART Receive Complete (RXC) flag is set and then
 * reads the data from the UDR register.
 */
uint8 UART_recieveByte(void)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){} // Wait until RXC flag is set
    14f8:	eb e2       	ldi	r30, 0x2B	; 43
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	88 23       	and	r24, r24
    1500:	dc f7       	brge	.-10     	; 0x14f8 <UART_recieveByte+0x8>
	return UDR; // Read and return the received data from UDR
    1502:	ec e2       	ldi	r30, 0x2C	; 44
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
}
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <UART_sendString>:
 * Description:
 * Function responsible for sending a string through UART to another UART device.
 * It iterates through the string and calls UART_sendByte() for each character.
 */
void UART_sendString(const uint8 *Str)
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	00 d0       	rcall	.+0      	; 0x1514 <UART_sendString+0x6>
    1514:	0f 92       	push	r0
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	9b 83       	std	Y+3, r25	; 0x03
    151c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    151e:	19 82       	std	Y+1, r1	; 0x01
    1520:	0e c0       	rjmp	.+28     	; 0x153e <UART_sendString+0x30>

	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	9b 81       	ldd	r25, Y+3	; 0x03
    152c:	fc 01       	movw	r30, r24
    152e:	e2 0f       	add	r30, r18
    1530:	f3 1f       	adc	r31, r19
    1532:	80 81       	ld	r24, Z
    1534:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <UART_sendByte>
		i++;
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	8f 5f       	subi	r24, 0xFF	; 255
    153c:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	while(Str[i] != '\0')
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	9b 81       	ldd	r25, Y+3	; 0x03
    1548:	fc 01       	movw	r30, r24
    154a:	e2 0f       	add	r30, r18
    154c:	f3 1f       	adc	r31, r19
    154e:	80 81       	ld	r24, Z
    1550:	88 23       	and	r24, r24
    1552:	39 f7       	brne	.-50     	; 0x1522 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <UART_receiveString>:
 * Description:
 * Function responsible for receiving a string until the '#' symbol through UART
 * from another UART device. It stores the received string in the provided array.
 */
void UART_receiveString(uint8 *Str)
{
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	00 d0       	rcall	.+0      	; 0x156a <UART_receiveString+0xa>
    156a:	0f 92       	push	r0
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	9b 83       	std	Y+3, r25	; 0x03
    1572:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1574:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte(); // Receive the first byte
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	9b 81       	ldd	r25, Y+3	; 0x03
    1580:	8c 01       	movw	r16, r24
    1582:	02 0f       	add	r16, r18
    1584:	13 1f       	adc	r17, r19
    1586:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <UART_recieveByte>
    158a:	f8 01       	movw	r30, r16
    158c:	80 83       	st	Z, r24
    158e:	0f c0       	rjmp	.+30     	; 0x15ae <UART_receiveString+0x4e>

	while(Str[i] != '#') // Continue receiving until '#' is encountered
	{
		i++;
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	8f 5f       	subi	r24, 0xFF	; 255
    1594:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte(); // Receive next byte
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	9b 81       	ldd	r25, Y+3	; 0x03
    15a0:	8c 01       	movw	r16, r24
    15a2:	02 0f       	add	r16, r18
    15a4:	13 1f       	adc	r17, r19
    15a6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <UART_recieveByte>
    15aa:	f8 01       	movw	r30, r16
    15ac:	80 83       	st	Z, r24
void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte(); // Receive the first byte

	while(Str[i] != '#') // Continue receiving until '#' is encountered
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	9b 81       	ldd	r25, Y+3	; 0x03
    15b8:	fc 01       	movw	r30, r24
    15ba:	e2 0f       	add	r30, r18
    15bc:	f3 1f       	adc	r31, r19
    15be:	80 81       	ld	r24, Z
    15c0:	83 32       	cpi	r24, 0x23	; 35
    15c2:	31 f7       	brne	.-52     	; 0x1590 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte(); // Receive next byte
	}

	Str[i] = '\0'; // Terminate the string with null character
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	9b 81       	ldd	r25, Y+3	; 0x03
    15ce:	fc 01       	movw	r30, r24
    15d0:	e2 0f       	add	r30, r18
    15d2:	f3 1f       	adc	r31, r19
    15d4:	10 82       	st	Z, r1
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	1f 91       	pop	r17
    15e2:	0f 91       	pop	r16
    15e4:	08 95       	ret

000015e6 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	60 97       	sbiw	r28, 0x10	; 16
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	40 e0       	ldi	r20, 0x00	; 0
    1600:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1604:	82 e0       	ldi	r24, 0x02	; 2
    1606:	61 e0       	ldi	r22, 0x01	; 1
    1608:	40 e0       	ldi	r20, 0x00	; 0
    160a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    160e:	82 e0       	ldi	r24, 0x02	; 2
    1610:	62 e0       	ldi	r22, 0x02	; 2
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1618:	82 e0       	ldi	r24, 0x02	; 2
    161a:	63 e0       	ldi	r22, 0x03	; 3
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	64 e0       	ldi	r22, 0x04	; 4
    1626:	40 e0       	ldi	r20, 0x00	; 0
    1628:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    162c:	82 e0       	ldi	r24, 0x02	; 2
    162e:	65 e0       	ldi	r22, 0x05	; 5
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1636:	82 e0       	ldi	r24, 0x02	; 2
    1638:	66 e0       	ldi	r22, 0x06	; 6
    163a:	40 e0       	ldi	r20, 0x00	; 0
    163c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1640:	82 e0       	ldi	r24, 0x02	; 2
    1642:	67 e0       	ldi	r22, 0x07	; 7
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    164a:	1f 86       	std	Y+15, r1	; 0x0f
    164c:	ab c0       	rjmp	.+342    	; 0x17a4 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	6f 85       	ldd	r22, Y+15	; 0x0f
    1652:	41 e0       	ldi	r20, 0x01	; 1
    1654:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1658:	82 e0       	ldi	r24, 0x02	; 2
    165a:	6f 85       	ldd	r22, Y+15	; 0x0f
    165c:	40 e0       	ldi	r20, 0x00	; 0
    165e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1662:	18 8a       	std	Y+16, r1	; 0x10
    1664:	22 c0       	rjmp	.+68     	; 0x16aa <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1666:	88 89       	ldd	r24, Y+16	; 0x10
    1668:	98 2f       	mov	r25, r24
    166a:	9c 5f       	subi	r25, 0xFC	; 252
    166c:	82 e0       	ldi	r24, 0x02	; 2
    166e:	69 2f       	mov	r22, r25
    1670:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1674:	88 23       	and	r24, r24
    1676:	b1 f4       	brne	.+44     	; 0x16a4 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1678:	8f 85       	ldd	r24, Y+15	; 0x0f
    167a:	88 2f       	mov	r24, r24
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	98 2f       	mov	r25, r24
    1688:	88 89       	ldd	r24, Y+16	; 0x10
    168a:	89 0f       	add	r24, r25
    168c:	8f 5f       	subi	r24, 0xFF	; 255
    168e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1692:	60 96       	adiw	r28, 0x10	; 16
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    16a4:	88 89       	ldd	r24, Y+16	; 0x10
    16a6:	8f 5f       	subi	r24, 0xFF	; 255
    16a8:	88 8b       	std	Y+16, r24	; 0x10
    16aa:	88 89       	ldd	r24, Y+16	; 0x10
    16ac:	84 30       	cpi	r24, 0x04	; 4
    16ae:	d8 f2       	brcs	.-74     	; 0x1666 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	6f 85       	ldd	r22, Y+15	; 0x0f
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	a0 ea       	ldi	r26, 0xA0	; 160
    16c0:	b0 e4       	ldi	r27, 0x40	; 64
    16c2:	8b 87       	std	Y+11, r24	; 0x0b
    16c4:	9c 87       	std	Y+12, r25	; 0x0c
    16c6:	ad 87       	std	Y+13, r26	; 0x0d
    16c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    16cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	4a ef       	ldi	r20, 0xFA	; 250
    16d8:	54 e4       	ldi	r21, 0x44	; 68
    16da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	8f 83       	std	Y+7, r24	; 0x07
    16e4:	98 87       	std	Y+8, r25	; 0x08
    16e6:	a9 87       	std	Y+9, r26	; 0x09
    16e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ea:	6f 81       	ldd	r22, Y+7	; 0x07
    16ec:	78 85       	ldd	r23, Y+8	; 0x08
    16ee:	89 85       	ldd	r24, Y+9	; 0x09
    16f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e8       	ldi	r20, 0x80	; 128
    16f8:	5f e3       	ldi	r21, 0x3F	; 63
    16fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16fe:	88 23       	and	r24, r24
    1700:	2c f4       	brge	.+10     	; 0x170c <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	9e 83       	std	Y+6, r25	; 0x06
    1708:	8d 83       	std	Y+5, r24	; 0x05
    170a:	3f c0       	rjmp	.+126    	; 0x178a <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    170c:	6f 81       	ldd	r22, Y+7	; 0x07
    170e:	78 85       	ldd	r23, Y+8	; 0x08
    1710:	89 85       	ldd	r24, Y+9	; 0x09
    1712:	9a 85       	ldd	r25, Y+10	; 0x0a
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	3f ef       	ldi	r19, 0xFF	; 255
    1718:	4f e7       	ldi	r20, 0x7F	; 127
    171a:	57 e4       	ldi	r21, 0x47	; 71
    171c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1720:	18 16       	cp	r1, r24
    1722:	4c f5       	brge	.+82     	; 0x1776 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1724:	6b 85       	ldd	r22, Y+11	; 0x0b
    1726:	7c 85       	ldd	r23, Y+12	; 0x0c
    1728:	8d 85       	ldd	r24, Y+13	; 0x0d
    172a:	9e 85       	ldd	r25, Y+14	; 0x0e
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e2       	ldi	r20, 0x20	; 32
    1732:	51 e4       	ldi	r21, 0x41	; 65
    1734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	bc 01       	movw	r22, r24
    173e:	cd 01       	movw	r24, r26
    1740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	8d 83       	std	Y+5, r24	; 0x05
    174c:	0f c0       	rjmp	.+30     	; 0x176c <KEYPAD_getPressedKey+0x186>
    174e:	88 ec       	ldi	r24, 0xC8	; 200
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	9c 83       	std	Y+4, r25	; 0x04
    1754:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	f1 f7       	brne	.-4      	; 0x175a <KEYPAD_getPressedKey+0x174>
    175e:	9c 83       	std	Y+4, r25	; 0x04
    1760:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	9e 83       	std	Y+6, r25	; 0x06
    176a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176c:	8d 81       	ldd	r24, Y+5	; 0x05
    176e:	9e 81       	ldd	r25, Y+6	; 0x06
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	69 f7       	brne	.-38     	; 0x174e <KEYPAD_getPressedKey+0x168>
    1774:	14 c0       	rjmp	.+40     	; 0x179e <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1776:	6f 81       	ldd	r22, Y+7	; 0x07
    1778:	78 85       	ldd	r23, Y+8	; 0x08
    177a:	89 85       	ldd	r24, Y+9	; 0x09
    177c:	9a 85       	ldd	r25, Y+10	; 0x0a
    177e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	9e 81       	ldd	r25, Y+6	; 0x06
    178e:	9a 83       	std	Y+2, r25	; 0x02
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	9a 81       	ldd	r25, Y+2	; 0x02
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <KEYPAD_getPressedKey+0x1b0>
    179a:	9a 83       	std	Y+2, r25	; 0x02
    179c:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    179e:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a0:	8f 5f       	subi	r24, 0xFF	; 255
    17a2:	8f 87       	std	Y+15, r24	; 0x0f
    17a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a6:	84 30       	cpi	r24, 0x04	; 4
    17a8:	08 f4       	brcc	.+2      	; 0x17ac <KEYPAD_getPressedKey+0x1c6>
    17aa:	51 cf       	rjmp	.-350    	; 0x164e <KEYPAD_getPressedKey+0x68>
    17ac:	4e cf       	rjmp	.-356    	; 0x164a <KEYPAD_getPressedKey+0x64>

000017ae <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <KEYPAD_4x4_adjustKeyNumber+0x6>
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <KEYPAD_4x4_adjustKeyNumber+0x8>
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    17bc:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	3c 83       	std	Y+4, r19	; 0x04
    17c6:	2b 83       	std	Y+3, r18	; 0x03
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	88 30       	cpi	r24, 0x08	; 8
    17ce:	91 05       	cpc	r25, r1
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <KEYPAD_4x4_adjustKeyNumber+0x26>
    17d2:	70 c0       	rjmp	.+224    	; 0x18b4 <KEYPAD_4x4_adjustKeyNumber+0x106>
    17d4:	2b 81       	ldd	r18, Y+3	; 0x03
    17d6:	3c 81       	ldd	r19, Y+4	; 0x04
    17d8:	29 30       	cpi	r18, 0x09	; 9
    17da:	31 05       	cpc	r19, r1
    17dc:	5c f5       	brge	.+86     	; 0x1834 <KEYPAD_4x4_adjustKeyNumber+0x86>
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	84 30       	cpi	r24, 0x04	; 4
    17e4:	91 05       	cpc	r25, r1
    17e6:	09 f4       	brne	.+2      	; 0x17ea <KEYPAD_4x4_adjustKeyNumber+0x3c>
    17e8:	59 c0       	rjmp	.+178    	; 0x189c <KEYPAD_4x4_adjustKeyNumber+0xee>
    17ea:	2b 81       	ldd	r18, Y+3	; 0x03
    17ec:	3c 81       	ldd	r19, Y+4	; 0x04
    17ee:	25 30       	cpi	r18, 0x05	; 5
    17f0:	31 05       	cpc	r19, r1
    17f2:	9c f4       	brge	.+38     	; 0x181a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	9c 81       	ldd	r25, Y+4	; 0x04
    17f8:	82 30       	cpi	r24, 0x02	; 2
    17fa:	91 05       	cpc	r25, r1
    17fc:	09 f4       	brne	.+2      	; 0x1800 <KEYPAD_4x4_adjustKeyNumber+0x52>
    17fe:	48 c0       	rjmp	.+144    	; 0x1890 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1800:	2b 81       	ldd	r18, Y+3	; 0x03
    1802:	3c 81       	ldd	r19, Y+4	; 0x04
    1804:	23 30       	cpi	r18, 0x03	; 3
    1806:	31 05       	cpc	r19, r1
    1808:	0c f0       	brlt	.+2      	; 0x180c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    180a:	45 c0       	rjmp	.+138    	; 0x1896 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	9c 81       	ldd	r25, Y+4	; 0x04
    1810:	81 30       	cpi	r24, 0x01	; 1
    1812:	91 05       	cpc	r25, r1
    1814:	09 f4       	brne	.+2      	; 0x1818 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1816:	39 c0       	rjmp	.+114    	; 0x188a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1818:	68 c0       	rjmp	.+208    	; 0x18ea <KEYPAD_4x4_adjustKeyNumber+0x13c>
    181a:	2b 81       	ldd	r18, Y+3	; 0x03
    181c:	3c 81       	ldd	r19, Y+4	; 0x04
    181e:	26 30       	cpi	r18, 0x06	; 6
    1820:	31 05       	cpc	r19, r1
    1822:	09 f4       	brne	.+2      	; 0x1826 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1824:	41 c0       	rjmp	.+130    	; 0x18a8 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	87 30       	cpi	r24, 0x07	; 7
    182c:	91 05       	cpc	r25, r1
    182e:	0c f0       	brlt	.+2      	; 0x1832 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1830:	3e c0       	rjmp	.+124    	; 0x18ae <KEYPAD_4x4_adjustKeyNumber+0x100>
    1832:	37 c0       	rjmp	.+110    	; 0x18a2 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1834:	2b 81       	ldd	r18, Y+3	; 0x03
    1836:	3c 81       	ldd	r19, Y+4	; 0x04
    1838:	2c 30       	cpi	r18, 0x0C	; 12
    183a:	31 05       	cpc	r19, r1
    183c:	09 f4       	brne	.+2      	; 0x1840 <KEYPAD_4x4_adjustKeyNumber+0x92>
    183e:	46 c0       	rjmp	.+140    	; 0x18cc <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	8d 30       	cpi	r24, 0x0D	; 13
    1846:	91 05       	cpc	r25, r1
    1848:	5c f4       	brge	.+22     	; 0x1860 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    184a:	2b 81       	ldd	r18, Y+3	; 0x03
    184c:	3c 81       	ldd	r19, Y+4	; 0x04
    184e:	2a 30       	cpi	r18, 0x0A	; 10
    1850:	31 05       	cpc	r19, r1
    1852:	b1 f1       	breq	.+108    	; 0x18c0 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	8b 30       	cpi	r24, 0x0B	; 11
    185a:	91 05       	cpc	r25, r1
    185c:	a4 f5       	brge	.+104    	; 0x18c6 <KEYPAD_4x4_adjustKeyNumber+0x118>
    185e:	2d c0       	rjmp	.+90     	; 0x18ba <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1860:	2b 81       	ldd	r18, Y+3	; 0x03
    1862:	3c 81       	ldd	r19, Y+4	; 0x04
    1864:	2e 30       	cpi	r18, 0x0E	; 14
    1866:	31 05       	cpc	r19, r1
    1868:	b9 f1       	breq	.+110    	; 0x18d8 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	9c 81       	ldd	r25, Y+4	; 0x04
    186e:	8e 30       	cpi	r24, 0x0E	; 14
    1870:	91 05       	cpc	r25, r1
    1872:	7c f1       	brlt	.+94     	; 0x18d2 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1874:	2b 81       	ldd	r18, Y+3	; 0x03
    1876:	3c 81       	ldd	r19, Y+4	; 0x04
    1878:	2f 30       	cpi	r18, 0x0F	; 15
    187a:	31 05       	cpc	r19, r1
    187c:	81 f1       	breq	.+96     	; 0x18de <KEYPAD_4x4_adjustKeyNumber+0x130>
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	9c 81       	ldd	r25, Y+4	; 0x04
    1882:	80 31       	cpi	r24, 0x10	; 16
    1884:	91 05       	cpc	r25, r1
    1886:	71 f1       	breq	.+92     	; 0x18e4 <KEYPAD_4x4_adjustKeyNumber+0x136>
    1888:	30 c0       	rjmp	.+96     	; 0x18ea <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
		case 1: keypad_button = '7';
    188a:	87 e3       	ldi	r24, 0x37	; 55
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	2f c0       	rjmp	.+94     	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 2: keypad_button = '8';
    1890:	88 e3       	ldi	r24, 0x38	; 56
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	2c c0       	rjmp	.+88     	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 3: keypad_button = '9';
    1896:	89 e3       	ldi	r24, 0x39	; 57
    1898:	89 83       	std	Y+1, r24	; 0x01
    189a:	29 c0       	rjmp	.+82     	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    189c:	85 e2       	ldi	r24, 0x25	; 37
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	26 c0       	rjmp	.+76     	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 5: keypad_button = '4';
    18a2:	84 e3       	ldi	r24, 0x34	; 52
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	23 c0       	rjmp	.+70     	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 6: keypad_button = '5';
    18a8:	85 e3       	ldi	r24, 0x35	; 53
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	20 c0       	rjmp	.+64     	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 7: keypad_button = '6';
    18ae:	86 e3       	ldi	r24, 0x36	; 54
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	1d c0       	rjmp	.+58     	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    18b4:	8a e2       	ldi	r24, 0x2A	; 42
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	1a c0       	rjmp	.+52     	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;		
		case 9: keypad_button = '1';
    18ba:	81 e3       	ldi	r24, 0x31	; 49
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	17 c0       	rjmp	.+46     	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 10: keypad_button = '2';
    18c0:	82 e3       	ldi	r24, 0x32	; 50
    18c2:	89 83       	std	Y+1, r24	; 0x01
    18c4:	14 c0       	rjmp	.+40     	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 11: keypad_button = '3';
    18c6:	83 e3       	ldi	r24, 0x33	; 51
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	11 c0       	rjmp	.+34     	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    18cc:	8d e2       	ldi	r24, 0x2D	; 45
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	0e c0       	rjmp	.+28     	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 13: keypad_button = '13';  /* ASCII of Enter */
    18d2:	83 e3       	ldi	r24, 0x33	; 51
    18d4:	89 83       	std	Y+1, r24	; 0x01
    18d6:	0b c0       	rjmp	.+22     	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;			
		case 14: keypad_button = '0';
    18d8:	80 e3       	ldi	r24, 0x30	; 48
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	08 c0       	rjmp	.+16     	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    18de:	8d e3       	ldi	r24, 0x3D	; 61
    18e0:	89 83       	std	Y+1, r24	; 0x01
    18e2:	05 c0       	rjmp	.+10     	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    18e4:	8b e2       	ldi	r24, 0x2B	; 43
    18e6:	89 83       	std	Y+1, r24	; 0x01
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		default: keypad_button = button_number;
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
} 
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    1906:	2e 97       	sbiw	r28, 0x0e	; 14
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	41 e0       	ldi	r20, 0x01	; 1
    1918:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	61 e0       	ldi	r22, 0x01	; 1
    1920:	41 e0       	ldi	r20, 0x01	; 1
    1922:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a0 ea       	ldi	r26, 0xA0	; 160
    192c:	b1 e4       	ldi	r27, 0x41	; 65
    192e:	8b 87       	std	Y+11, r24	; 0x0b
    1930:	9c 87       	std	Y+12, r25	; 0x0c
    1932:	ad 87       	std	Y+13, r26	; 0x0d
    1934:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1936:	6b 85       	ldd	r22, Y+11	; 0x0b
    1938:	7c 85       	ldd	r23, Y+12	; 0x0c
    193a:	8d 85       	ldd	r24, Y+13	; 0x0d
    193c:	9e 85       	ldd	r25, Y+14	; 0x0e
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	4a ef       	ldi	r20, 0xFA	; 250
    1944:	54 e4       	ldi	r21, 0x44	; 68
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	8f 83       	std	Y+7, r24	; 0x07
    1950:	98 87       	std	Y+8, r25	; 0x08
    1952:	a9 87       	std	Y+9, r26	; 0x09
    1954:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1956:	6f 81       	ldd	r22, Y+7	; 0x07
    1958:	78 85       	ldd	r23, Y+8	; 0x08
    195a:	89 85       	ldd	r24, Y+9	; 0x09
    195c:	9a 85       	ldd	r25, Y+10	; 0x0a
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e8       	ldi	r20, 0x80	; 128
    1964:	5f e3       	ldi	r21, 0x3F	; 63
    1966:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    196a:	88 23       	and	r24, r24
    196c:	2c f4       	brge	.+10     	; 0x1978 <LCD_init+0x7a>
		__ticks = 1;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	9e 83       	std	Y+6, r25	; 0x06
    1974:	8d 83       	std	Y+5, r24	; 0x05
    1976:	3f c0       	rjmp	.+126    	; 0x19f6 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1978:	6f 81       	ldd	r22, Y+7	; 0x07
    197a:	78 85       	ldd	r23, Y+8	; 0x08
    197c:	89 85       	ldd	r24, Y+9	; 0x09
    197e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	3f ef       	ldi	r19, 0xFF	; 255
    1984:	4f e7       	ldi	r20, 0x7F	; 127
    1986:	57 e4       	ldi	r21, 0x47	; 71
    1988:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    198c:	18 16       	cp	r1, r24
    198e:	4c f5       	brge	.+82     	; 0x19e2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1990:	6b 85       	ldd	r22, Y+11	; 0x0b
    1992:	7c 85       	ldd	r23, Y+12	; 0x0c
    1994:	8d 85       	ldd	r24, Y+13	; 0x0d
    1996:	9e 85       	ldd	r25, Y+14	; 0x0e
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e2       	ldi	r20, 0x20	; 32
    199e:	51 e4       	ldi	r21, 0x41	; 65
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	bc 01       	movw	r22, r24
    19aa:	cd 01       	movw	r24, r26
    19ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	9e 83       	std	Y+6, r25	; 0x06
    19b6:	8d 83       	std	Y+5, r24	; 0x05
    19b8:	0f c0       	rjmp	.+30     	; 0x19d8 <LCD_init+0xda>
    19ba:	88 ec       	ldi	r24, 0xC8	; 200
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	9c 83       	std	Y+4, r25	; 0x04
    19c0:	8b 83       	std	Y+3, r24	; 0x03
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	9c 81       	ldd	r25, Y+4	; 0x04
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <LCD_init+0xc8>
    19ca:	9c 83       	std	Y+4, r25	; 0x04
    19cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ce:	8d 81       	ldd	r24, Y+5	; 0x05
    19d0:	9e 81       	ldd	r25, Y+6	; 0x06
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	9e 81       	ldd	r25, Y+6	; 0x06
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	69 f7       	brne	.-38     	; 0x19ba <LCD_init+0xbc>
    19e0:	14 c0       	rjmp	.+40     	; 0x1a0a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e2:	6f 81       	ldd	r22, Y+7	; 0x07
    19e4:	78 85       	ldd	r23, Y+8	; 0x08
    19e6:	89 85       	ldd	r24, Y+9	; 0x09
    19e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	9e 83       	std	Y+6, r25	; 0x06
    19f4:	8d 83       	std	Y+5, r24	; 0x05
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	9e 81       	ldd	r25, Y+6	; 0x06
    19fa:	9a 83       	std	Y+2, r25	; 0x02
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <LCD_init+0x104>
    1a06:	9a 83       	std	Y+2, r25	; 0x02
    1a08:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	6f ef       	ldi	r22, 0xFF	; 255
    1a0e:	0e 94 18 08 	call	0x1030	; 0x1030 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1a12:	88 e3       	ldi	r24, 0x38	; 56
    1a14:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1a18:	8c e0       	ldi	r24, 0x0C	; 12
    1a1a:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_sendCommand>
}
    1a24:	2e 96       	adiw	r28, 0x0e	; 14
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	e9 97       	sbiw	r28, 0x39	; 57
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	a0 e8       	ldi	r26, 0x80	; 128
    1a5c:	bf e3       	ldi	r27, 0x3F	; 63
    1a5e:	8d ab       	std	Y+53, r24	; 0x35
    1a60:	9e ab       	std	Y+54, r25	; 0x36
    1a62:	af ab       	std	Y+55, r26	; 0x37
    1a64:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a66:	6d a9       	ldd	r22, Y+53	; 0x35
    1a68:	7e a9       	ldd	r23, Y+54	; 0x36
    1a6a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a6c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	4a ef       	ldi	r20, 0xFA	; 250
    1a74:	54 e4       	ldi	r21, 0x44	; 68
    1a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	89 ab       	std	Y+49, r24	; 0x31
    1a80:	9a ab       	std	Y+50, r25	; 0x32
    1a82:	ab ab       	std	Y+51, r26	; 0x33
    1a84:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a86:	69 a9       	ldd	r22, Y+49	; 0x31
    1a88:	7a a9       	ldd	r23, Y+50	; 0x32
    1a8a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a8c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e8       	ldi	r20, 0x80	; 128
    1a94:	5f e3       	ldi	r21, 0x3F	; 63
    1a96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a9a:	88 23       	and	r24, r24
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <LCD_sendCommand+0x72>
		__ticks = 1;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	98 ab       	std	Y+48, r25	; 0x30
    1aa4:	8f a7       	std	Y+47, r24	; 0x2f
    1aa6:	3f c0       	rjmp	.+126    	; 0x1b26 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1aa8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aaa:	7a a9       	ldd	r23, Y+50	; 0x32
    1aac:	8b a9       	ldd	r24, Y+51	; 0x33
    1aae:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	3f ef       	ldi	r19, 0xFF	; 255
    1ab4:	4f e7       	ldi	r20, 0x7F	; 127
    1ab6:	57 e4       	ldi	r21, 0x47	; 71
    1ab8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1abc:	18 16       	cp	r1, r24
    1abe:	4c f5       	brge	.+82     	; 0x1b12 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ac2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ac4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ac6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e2       	ldi	r20, 0x20	; 32
    1ace:	51 e4       	ldi	r21, 0x41	; 65
    1ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	98 ab       	std	Y+48, r25	; 0x30
    1ae6:	8f a7       	std	Y+47, r24	; 0x2f
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <LCD_sendCommand+0xd2>
    1aea:	88 ec       	ldi	r24, 0xC8	; 200
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	9e a7       	std	Y+46, r25	; 0x2e
    1af0:	8d a7       	std	Y+45, r24	; 0x2d
    1af2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1af4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_sendCommand+0xc0>
    1afa:	9e a7       	std	Y+46, r25	; 0x2e
    1afc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b00:	98 a9       	ldd	r25, Y+48	; 0x30
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	98 ab       	std	Y+48, r25	; 0x30
    1b06:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	69 f7       	brne	.-38     	; 0x1aea <LCD_sendCommand+0xb4>
    1b10:	14 c0       	rjmp	.+40     	; 0x1b3a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b12:	69 a9       	ldd	r22, Y+49	; 0x31
    1b14:	7a a9       	ldd	r23, Y+50	; 0x32
    1b16:	8b a9       	ldd	r24, Y+51	; 0x33
    1b18:	9c a9       	ldd	r25, Y+52	; 0x34
    1b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	98 ab       	std	Y+48, r25	; 0x30
    1b24:	8f a7       	std	Y+47, r24	; 0x2f
    1b26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b28:	98 a9       	ldd	r25, Y+48	; 0x30
    1b2a:	9c a7       	std	Y+44, r25	; 0x2c
    1b2c:	8b a7       	std	Y+43, r24	; 0x2b
    1b2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b30:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LCD_sendCommand+0xfc>
    1b36:	9c a7       	std	Y+44, r25	; 0x2c
    1b38:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	61 e0       	ldi	r22, 0x01	; 1
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a0 e8       	ldi	r26, 0x80	; 128
    1b4a:	bf e3       	ldi	r27, 0x3F	; 63
    1b4c:	8f a3       	std	Y+39, r24	; 0x27
    1b4e:	98 a7       	std	Y+40, r25	; 0x28
    1b50:	a9 a7       	std	Y+41, r26	; 0x29
    1b52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b54:	6f a1       	ldd	r22, Y+39	; 0x27
    1b56:	78 a5       	ldd	r23, Y+40	; 0x28
    1b58:	89 a5       	ldd	r24, Y+41	; 0x29
    1b5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	4a ef       	ldi	r20, 0xFA	; 250
    1b62:	54 e4       	ldi	r21, 0x44	; 68
    1b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	8b a3       	std	Y+35, r24	; 0x23
    1b6e:	9c a3       	std	Y+36, r25	; 0x24
    1b70:	ad a3       	std	Y+37, r26	; 0x25
    1b72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b74:	6b a1       	ldd	r22, Y+35	; 0x23
    1b76:	7c a1       	ldd	r23, Y+36	; 0x24
    1b78:	8d a1       	ldd	r24, Y+37	; 0x25
    1b7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e8       	ldi	r20, 0x80	; 128
    1b82:	5f e3       	ldi	r21, 0x3F	; 63
    1b84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b88:	88 23       	and	r24, r24
    1b8a:	2c f4       	brge	.+10     	; 0x1b96 <LCD_sendCommand+0x160>
		__ticks = 1;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	9a a3       	std	Y+34, r25	; 0x22
    1b92:	89 a3       	std	Y+33, r24	; 0x21
    1b94:	3f c0       	rjmp	.+126    	; 0x1c14 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1b96:	6b a1       	ldd	r22, Y+35	; 0x23
    1b98:	7c a1       	ldd	r23, Y+36	; 0x24
    1b9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	3f ef       	ldi	r19, 0xFF	; 255
    1ba2:	4f e7       	ldi	r20, 0x7F	; 127
    1ba4:	57 e4       	ldi	r21, 0x47	; 71
    1ba6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1baa:	18 16       	cp	r1, r24
    1bac:	4c f5       	brge	.+82     	; 0x1c00 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bae:	6f a1       	ldd	r22, Y+39	; 0x27
    1bb0:	78 a5       	ldd	r23, Y+40	; 0x28
    1bb2:	89 a5       	ldd	r24, Y+41	; 0x29
    1bb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e2       	ldi	r20, 0x20	; 32
    1bbc:	51 e4       	ldi	r21, 0x41	; 65
    1bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	bc 01       	movw	r22, r24
    1bc8:	cd 01       	movw	r24, r26
    1bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	9a a3       	std	Y+34, r25	; 0x22
    1bd4:	89 a3       	std	Y+33, r24	; 0x21
    1bd6:	0f c0       	rjmp	.+30     	; 0x1bf6 <LCD_sendCommand+0x1c0>
    1bd8:	88 ec       	ldi	r24, 0xC8	; 200
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	98 a3       	std	Y+32, r25	; 0x20
    1bde:	8f 8f       	std	Y+31, r24	; 0x1f
    1be0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1be2:	98 a1       	ldd	r25, Y+32	; 0x20
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_sendCommand+0x1ae>
    1be8:	98 a3       	std	Y+32, r25	; 0x20
    1bea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bec:	89 a1       	ldd	r24, Y+33	; 0x21
    1bee:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	9a a3       	std	Y+34, r25	; 0x22
    1bf4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	69 f7       	brne	.-38     	; 0x1bd8 <LCD_sendCommand+0x1a2>
    1bfe:	14 c0       	rjmp	.+40     	; 0x1c28 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c00:	6b a1       	ldd	r22, Y+35	; 0x23
    1c02:	7c a1       	ldd	r23, Y+36	; 0x24
    1c04:	8d a1       	ldd	r24, Y+37	; 0x25
    1c06:	9e a1       	ldd	r25, Y+38	; 0x26
    1c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	9a a3       	std	Y+34, r25	; 0x22
    1c12:	89 a3       	std	Y+33, r24	; 0x21
    1c14:	89 a1       	ldd	r24, Y+33	; 0x21
    1c16:	9a a1       	ldd	r25, Y+34	; 0x22
    1c18:	9e 8f       	std	Y+30, r25	; 0x1e
    1c1a:	8d 8f       	std	Y+29, r24	; 0x1d
    1c1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LCD_sendCommand+0x1ea>
    1c24:	9e 8f       	std	Y+30, r25	; 0x1e
    1c26:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	69 ad       	ldd	r22, Y+57	; 0x39
    1c2c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_writePort>
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	a0 e8       	ldi	r26, 0x80	; 128
    1c36:	bf e3       	ldi	r27, 0x3F	; 63
    1c38:	89 8f       	std	Y+25, r24	; 0x19
    1c3a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c3c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c3e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c40:	69 8d       	ldd	r22, Y+25	; 0x19
    1c42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	4a ef       	ldi	r20, 0xFA	; 250
    1c4e:	54 e4       	ldi	r21, 0x44	; 68
    1c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	8d 8b       	std	Y+21, r24	; 0x15
    1c5a:	9e 8b       	std	Y+22, r25	; 0x16
    1c5c:	af 8b       	std	Y+23, r26	; 0x17
    1c5e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c60:	6d 89       	ldd	r22, Y+21	; 0x15
    1c62:	7e 89       	ldd	r23, Y+22	; 0x16
    1c64:	8f 89       	ldd	r24, Y+23	; 0x17
    1c66:	98 8d       	ldd	r25, Y+24	; 0x18
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e8       	ldi	r20, 0x80	; 128
    1c6e:	5f e3       	ldi	r21, 0x3F	; 63
    1c70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c74:	88 23       	and	r24, r24
    1c76:	2c f4       	brge	.+10     	; 0x1c82 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9c 8b       	std	Y+20, r25	; 0x14
    1c7e:	8b 8b       	std	Y+19, r24	; 0x13
    1c80:	3f c0       	rjmp	.+126    	; 0x1d00 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1c82:	6d 89       	ldd	r22, Y+21	; 0x15
    1c84:	7e 89       	ldd	r23, Y+22	; 0x16
    1c86:	8f 89       	ldd	r24, Y+23	; 0x17
    1c88:	98 8d       	ldd	r25, Y+24	; 0x18
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	3f ef       	ldi	r19, 0xFF	; 255
    1c8e:	4f e7       	ldi	r20, 0x7F	; 127
    1c90:	57 e4       	ldi	r21, 0x47	; 71
    1c92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c96:	18 16       	cp	r1, r24
    1c98:	4c f5       	brge	.+82     	; 0x1cec <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ca0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e2       	ldi	r20, 0x20	; 32
    1ca8:	51 e4       	ldi	r21, 0x41	; 65
    1caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	cd 01       	movw	r24, r26
    1cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	9c 8b       	std	Y+20, r25	; 0x14
    1cc0:	8b 8b       	std	Y+19, r24	; 0x13
    1cc2:	0f c0       	rjmp	.+30     	; 0x1ce2 <LCD_sendCommand+0x2ac>
    1cc4:	88 ec       	ldi	r24, 0xC8	; 200
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9a 8b       	std	Y+18, r25	; 0x12
    1cca:	89 8b       	std	Y+17, r24	; 0x11
    1ccc:	89 89       	ldd	r24, Y+17	; 0x11
    1cce:	9a 89       	ldd	r25, Y+18	; 0x12
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <LCD_sendCommand+0x29a>
    1cd4:	9a 8b       	std	Y+18, r25	; 0x12
    1cd6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cda:	9c 89       	ldd	r25, Y+20	; 0x14
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	9c 8b       	std	Y+20, r25	; 0x14
    1ce0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce6:	00 97       	sbiw	r24, 0x00	; 0
    1ce8:	69 f7       	brne	.-38     	; 0x1cc4 <LCD_sendCommand+0x28e>
    1cea:	14 c0       	rjmp	.+40     	; 0x1d14 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cec:	6d 89       	ldd	r22, Y+21	; 0x15
    1cee:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9c 8b       	std	Y+20, r25	; 0x14
    1cfe:	8b 8b       	std	Y+19, r24	; 0x13
    1d00:	8b 89       	ldd	r24, Y+19	; 0x13
    1d02:	9c 89       	ldd	r25, Y+20	; 0x14
    1d04:	98 8b       	std	Y+16, r25	; 0x10
    1d06:	8f 87       	std	Y+15, r24	; 0x0f
    1d08:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d0a:	98 89       	ldd	r25, Y+16	; 0x10
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <LCD_sendCommand+0x2d6>
    1d10:	98 8b       	std	Y+16, r25	; 0x10
    1d12:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	61 e0       	ldi	r22, 0x01	; 1
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	a0 e8       	ldi	r26, 0x80	; 128
    1d24:	bf e3       	ldi	r27, 0x3F	; 63
    1d26:	8b 87       	std	Y+11, r24	; 0x0b
    1d28:	9c 87       	std	Y+12, r25	; 0x0c
    1d2a:	ad 87       	std	Y+13, r26	; 0x0d
    1d2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	4a ef       	ldi	r20, 0xFA	; 250
    1d3c:	54 e4       	ldi	r21, 0x44	; 68
    1d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	8f 83       	std	Y+7, r24	; 0x07
    1d48:	98 87       	std	Y+8, r25	; 0x08
    1d4a:	a9 87       	std	Y+9, r26	; 0x09
    1d4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d50:	78 85       	ldd	r23, Y+8	; 0x08
    1d52:	89 85       	ldd	r24, Y+9	; 0x09
    1d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e8       	ldi	r20, 0x80	; 128
    1d5c:	5f e3       	ldi	r21, 0x3F	; 63
    1d5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d62:	88 23       	and	r24, r24
    1d64:	2c f4       	brge	.+10     	; 0x1d70 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	9e 83       	std	Y+6, r25	; 0x06
    1d6c:	8d 83       	std	Y+5, r24	; 0x05
    1d6e:	3f c0       	rjmp	.+126    	; 0x1dee <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1d70:	6f 81       	ldd	r22, Y+7	; 0x07
    1d72:	78 85       	ldd	r23, Y+8	; 0x08
    1d74:	89 85       	ldd	r24, Y+9	; 0x09
    1d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	3f ef       	ldi	r19, 0xFF	; 255
    1d7c:	4f e7       	ldi	r20, 0x7F	; 127
    1d7e:	57 e4       	ldi	r21, 0x47	; 71
    1d80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d84:	18 16       	cp	r1, r24
    1d86:	4c f5       	brge	.+82     	; 0x1dda <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	40 e2       	ldi	r20, 0x20	; 32
    1d96:	51 e4       	ldi	r21, 0x41	; 65
    1d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	bc 01       	movw	r22, r24
    1da2:	cd 01       	movw	r24, r26
    1da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	9e 83       	std	Y+6, r25	; 0x06
    1dae:	8d 83       	std	Y+5, r24	; 0x05
    1db0:	0f c0       	rjmp	.+30     	; 0x1dd0 <LCD_sendCommand+0x39a>
    1db2:	88 ec       	ldi	r24, 0xC8	; 200
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	9c 83       	std	Y+4, r25	; 0x04
    1db8:	8b 83       	std	Y+3, r24	; 0x03
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	f1 f7       	brne	.-4      	; 0x1dbe <LCD_sendCommand+0x388>
    1dc2:	9c 83       	std	Y+4, r25	; 0x04
    1dc4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	9e 83       	std	Y+6, r25	; 0x06
    1dce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd4:	00 97       	sbiw	r24, 0x00	; 0
    1dd6:	69 f7       	brne	.-38     	; 0x1db2 <LCD_sendCommand+0x37c>
    1dd8:	14 c0       	rjmp	.+40     	; 0x1e02 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dda:	6f 81       	ldd	r22, Y+7	; 0x07
    1ddc:	78 85       	ldd	r23, Y+8	; 0x08
    1dde:	89 85       	ldd	r24, Y+9	; 0x09
    1de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	9e 83       	std	Y+6, r25	; 0x06
    1dec:	8d 83       	std	Y+5, r24	; 0x05
    1dee:	8d 81       	ldd	r24, Y+5	; 0x05
    1df0:	9e 81       	ldd	r25, Y+6	; 0x06
    1df2:	9a 83       	std	Y+2, r25	; 0x02
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	f1 f7       	brne	.-4      	; 0x1dfa <LCD_sendCommand+0x3c4>
    1dfe:	9a 83       	std	Y+2, r25	; 0x02
    1e00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1e02:	e9 96       	adiw	r28, 0x39	; 57
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	e9 97       	sbiw	r28, 0x39	; 57
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	60 e0       	ldi	r22, 0x00	; 0
    1e2e:	41 e0       	ldi	r20, 0x01	; 1
    1e30:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	a0 e8       	ldi	r26, 0x80	; 128
    1e3a:	bf e3       	ldi	r27, 0x3F	; 63
    1e3c:	8d ab       	std	Y+53, r24	; 0x35
    1e3e:	9e ab       	std	Y+54, r25	; 0x36
    1e40:	af ab       	std	Y+55, r26	; 0x37
    1e42:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e44:	6d a9       	ldd	r22, Y+53	; 0x35
    1e46:	7e a9       	ldd	r23, Y+54	; 0x36
    1e48:	8f a9       	ldd	r24, Y+55	; 0x37
    1e4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	4a ef       	ldi	r20, 0xFA	; 250
    1e52:	54 e4       	ldi	r21, 0x44	; 68
    1e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	89 ab       	std	Y+49, r24	; 0x31
    1e5e:	9a ab       	std	Y+50, r25	; 0x32
    1e60:	ab ab       	std	Y+51, r26	; 0x33
    1e62:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e64:	69 a9       	ldd	r22, Y+49	; 0x31
    1e66:	7a a9       	ldd	r23, Y+50	; 0x32
    1e68:	8b a9       	ldd	r24, Y+51	; 0x33
    1e6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e8       	ldi	r20, 0x80	; 128
    1e72:	5f e3       	ldi	r21, 0x3F	; 63
    1e74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e78:	88 23       	and	r24, r24
    1e7a:	2c f4       	brge	.+10     	; 0x1e86 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	98 ab       	std	Y+48, r25	; 0x30
    1e82:	8f a7       	std	Y+47, r24	; 0x2f
    1e84:	3f c0       	rjmp	.+126    	; 0x1f04 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1e86:	69 a9       	ldd	r22, Y+49	; 0x31
    1e88:	7a a9       	ldd	r23, Y+50	; 0x32
    1e8a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e8c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	3f ef       	ldi	r19, 0xFF	; 255
    1e92:	4f e7       	ldi	r20, 0x7F	; 127
    1e94:	57 e4       	ldi	r21, 0x47	; 71
    1e96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e9a:	18 16       	cp	r1, r24
    1e9c:	4c f5       	brge	.+82     	; 0x1ef0 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9e:	6d a9       	ldd	r22, Y+53	; 0x35
    1ea0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ea2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ea4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e2       	ldi	r20, 0x20	; 32
    1eac:	51 e4       	ldi	r21, 0x41	; 65
    1eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	bc 01       	movw	r22, r24
    1eb8:	cd 01       	movw	r24, r26
    1eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	98 ab       	std	Y+48, r25	; 0x30
    1ec4:	8f a7       	std	Y+47, r24	; 0x2f
    1ec6:	0f c0       	rjmp	.+30     	; 0x1ee6 <LCD_displayCharacter+0xd2>
    1ec8:	88 ec       	ldi	r24, 0xC8	; 200
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	9e a7       	std	Y+46, r25	; 0x2e
    1ece:	8d a7       	std	Y+45, r24	; 0x2d
    1ed0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ed2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	f1 f7       	brne	.-4      	; 0x1ed4 <LCD_displayCharacter+0xc0>
    1ed8:	9e a7       	std	Y+46, r25	; 0x2e
    1eda:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1edc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ede:	98 a9       	ldd	r25, Y+48	; 0x30
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	98 ab       	std	Y+48, r25	; 0x30
    1ee4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ee8:	98 a9       	ldd	r25, Y+48	; 0x30
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	69 f7       	brne	.-38     	; 0x1ec8 <LCD_displayCharacter+0xb4>
    1eee:	14 c0       	rjmp	.+40     	; 0x1f18 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ef2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ef4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ef6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	98 ab       	std	Y+48, r25	; 0x30
    1f02:	8f a7       	std	Y+47, r24	; 0x2f
    1f04:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f06:	98 a9       	ldd	r25, Y+48	; 0x30
    1f08:	9c a7       	std	Y+44, r25	; 0x2c
    1f0a:	8b a7       	std	Y+43, r24	; 0x2b
    1f0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f0e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <LCD_displayCharacter+0xfc>
    1f14:	9c a7       	std	Y+44, r25	; 0x2c
    1f16:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	61 e0       	ldi	r22, 0x01	; 1
    1f1c:	41 e0       	ldi	r20, 0x01	; 1
    1f1e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	a0 e8       	ldi	r26, 0x80	; 128
    1f28:	bf e3       	ldi	r27, 0x3F	; 63
    1f2a:	8f a3       	std	Y+39, r24	; 0x27
    1f2c:	98 a7       	std	Y+40, r25	; 0x28
    1f2e:	a9 a7       	std	Y+41, r26	; 0x29
    1f30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f32:	6f a1       	ldd	r22, Y+39	; 0x27
    1f34:	78 a5       	ldd	r23, Y+40	; 0x28
    1f36:	89 a5       	ldd	r24, Y+41	; 0x29
    1f38:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	4a ef       	ldi	r20, 0xFA	; 250
    1f40:	54 e4       	ldi	r21, 0x44	; 68
    1f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	8b a3       	std	Y+35, r24	; 0x23
    1f4c:	9c a3       	std	Y+36, r25	; 0x24
    1f4e:	ad a3       	std	Y+37, r26	; 0x25
    1f50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f52:	6b a1       	ldd	r22, Y+35	; 0x23
    1f54:	7c a1       	ldd	r23, Y+36	; 0x24
    1f56:	8d a1       	ldd	r24, Y+37	; 0x25
    1f58:	9e a1       	ldd	r25, Y+38	; 0x26
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	40 e8       	ldi	r20, 0x80	; 128
    1f60:	5f e3       	ldi	r21, 0x3F	; 63
    1f62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f66:	88 23       	and	r24, r24
    1f68:	2c f4       	brge	.+10     	; 0x1f74 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	9a a3       	std	Y+34, r25	; 0x22
    1f70:	89 a3       	std	Y+33, r24	; 0x21
    1f72:	3f c0       	rjmp	.+126    	; 0x1ff2 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1f74:	6b a1       	ldd	r22, Y+35	; 0x23
    1f76:	7c a1       	ldd	r23, Y+36	; 0x24
    1f78:	8d a1       	ldd	r24, Y+37	; 0x25
    1f7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	3f ef       	ldi	r19, 0xFF	; 255
    1f80:	4f e7       	ldi	r20, 0x7F	; 127
    1f82:	57 e4       	ldi	r21, 0x47	; 71
    1f84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f88:	18 16       	cp	r1, r24
    1f8a:	4c f5       	brge	.+82     	; 0x1fde <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f8e:	78 a5       	ldd	r23, Y+40	; 0x28
    1f90:	89 a5       	ldd	r24, Y+41	; 0x29
    1f92:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e2       	ldi	r20, 0x20	; 32
    1f9a:	51 e4       	ldi	r21, 0x41	; 65
    1f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	bc 01       	movw	r22, r24
    1fa6:	cd 01       	movw	r24, r26
    1fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	9a a3       	std	Y+34, r25	; 0x22
    1fb2:	89 a3       	std	Y+33, r24	; 0x21
    1fb4:	0f c0       	rjmp	.+30     	; 0x1fd4 <LCD_displayCharacter+0x1c0>
    1fb6:	88 ec       	ldi	r24, 0xC8	; 200
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	98 a3       	std	Y+32, r25	; 0x20
    1fbc:	8f 8f       	std	Y+31, r24	; 0x1f
    1fbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fc0:	98 a1       	ldd	r25, Y+32	; 0x20
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <LCD_displayCharacter+0x1ae>
    1fc6:	98 a3       	std	Y+32, r25	; 0x20
    1fc8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fca:	89 a1       	ldd	r24, Y+33	; 0x21
    1fcc:	9a a1       	ldd	r25, Y+34	; 0x22
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	9a a3       	std	Y+34, r25	; 0x22
    1fd2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	69 f7       	brne	.-38     	; 0x1fb6 <LCD_displayCharacter+0x1a2>
    1fdc:	14 c0       	rjmp	.+40     	; 0x2006 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fde:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	9a a3       	std	Y+34, r25	; 0x22
    1ff0:	89 a3       	std	Y+33, r24	; 0x21
    1ff2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ff8:	8d 8f       	std	Y+29, r24	; 0x1d
    1ffa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ffc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <LCD_displayCharacter+0x1ea>
    2002:	9e 8f       	std	Y+30, r25	; 0x1e
    2004:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	69 ad       	ldd	r22, Y+57	; 0x39
    200a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_writePort>
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	a0 e8       	ldi	r26, 0x80	; 128
    2014:	bf e3       	ldi	r27, 0x3F	; 63
    2016:	89 8f       	std	Y+25, r24	; 0x19
    2018:	9a 8f       	std	Y+26, r25	; 0x1a
    201a:	ab 8f       	std	Y+27, r26	; 0x1b
    201c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201e:	69 8d       	ldd	r22, Y+25	; 0x19
    2020:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2022:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2024:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	4a ef       	ldi	r20, 0xFA	; 250
    202c:	54 e4       	ldi	r21, 0x44	; 68
    202e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	8d 8b       	std	Y+21, r24	; 0x15
    2038:	9e 8b       	std	Y+22, r25	; 0x16
    203a:	af 8b       	std	Y+23, r26	; 0x17
    203c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    203e:	6d 89       	ldd	r22, Y+21	; 0x15
    2040:	7e 89       	ldd	r23, Y+22	; 0x16
    2042:	8f 89       	ldd	r24, Y+23	; 0x17
    2044:	98 8d       	ldd	r25, Y+24	; 0x18
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e8       	ldi	r20, 0x80	; 128
    204c:	5f e3       	ldi	r21, 0x3F	; 63
    204e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2052:	88 23       	and	r24, r24
    2054:	2c f4       	brge	.+10     	; 0x2060 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9c 8b       	std	Y+20, r25	; 0x14
    205c:	8b 8b       	std	Y+19, r24	; 0x13
    205e:	3f c0       	rjmp	.+126    	; 0x20de <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2060:	6d 89       	ldd	r22, Y+21	; 0x15
    2062:	7e 89       	ldd	r23, Y+22	; 0x16
    2064:	8f 89       	ldd	r24, Y+23	; 0x17
    2066:	98 8d       	ldd	r25, Y+24	; 0x18
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	3f ef       	ldi	r19, 0xFF	; 255
    206c:	4f e7       	ldi	r20, 0x7F	; 127
    206e:	57 e4       	ldi	r21, 0x47	; 71
    2070:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2074:	18 16       	cp	r1, r24
    2076:	4c f5       	brge	.+82     	; 0x20ca <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2078:	69 8d       	ldd	r22, Y+25	; 0x19
    207a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    207c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    207e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	40 e2       	ldi	r20, 0x20	; 32
    2086:	51 e4       	ldi	r21, 0x41	; 65
    2088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	bc 01       	movw	r22, r24
    2092:	cd 01       	movw	r24, r26
    2094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	9c 8b       	std	Y+20, r25	; 0x14
    209e:	8b 8b       	std	Y+19, r24	; 0x13
    20a0:	0f c0       	rjmp	.+30     	; 0x20c0 <LCD_displayCharacter+0x2ac>
    20a2:	88 ec       	ldi	r24, 0xC8	; 200
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	9a 8b       	std	Y+18, r25	; 0x12
    20a8:	89 8b       	std	Y+17, r24	; 0x11
    20aa:	89 89       	ldd	r24, Y+17	; 0x11
    20ac:	9a 89       	ldd	r25, Y+18	; 0x12
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <LCD_displayCharacter+0x29a>
    20b2:	9a 8b       	std	Y+18, r25	; 0x12
    20b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b6:	8b 89       	ldd	r24, Y+19	; 0x13
    20b8:	9c 89       	ldd	r25, Y+20	; 0x14
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	9c 8b       	std	Y+20, r25	; 0x14
    20be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c0:	8b 89       	ldd	r24, Y+19	; 0x13
    20c2:	9c 89       	ldd	r25, Y+20	; 0x14
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	69 f7       	brne	.-38     	; 0x20a2 <LCD_displayCharacter+0x28e>
    20c8:	14 c0       	rjmp	.+40     	; 0x20f2 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ca:	6d 89       	ldd	r22, Y+21	; 0x15
    20cc:	7e 89       	ldd	r23, Y+22	; 0x16
    20ce:	8f 89       	ldd	r24, Y+23	; 0x17
    20d0:	98 8d       	ldd	r25, Y+24	; 0x18
    20d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	9c 8b       	std	Y+20, r25	; 0x14
    20dc:	8b 8b       	std	Y+19, r24	; 0x13
    20de:	8b 89       	ldd	r24, Y+19	; 0x13
    20e0:	9c 89       	ldd	r25, Y+20	; 0x14
    20e2:	98 8b       	std	Y+16, r25	; 0x10
    20e4:	8f 87       	std	Y+15, r24	; 0x0f
    20e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20e8:	98 89       	ldd	r25, Y+16	; 0x10
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <LCD_displayCharacter+0x2d6>
    20ee:	98 8b       	std	Y+16, r25	; 0x10
    20f0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	61 e0       	ldi	r22, 0x01	; 1
    20f6:	40 e0       	ldi	r20, 0x00	; 0
    20f8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a0 e8       	ldi	r26, 0x80	; 128
    2102:	bf e3       	ldi	r27, 0x3F	; 63
    2104:	8b 87       	std	Y+11, r24	; 0x0b
    2106:	9c 87       	std	Y+12, r25	; 0x0c
    2108:	ad 87       	std	Y+13, r26	; 0x0d
    210a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210c:	6b 85       	ldd	r22, Y+11	; 0x0b
    210e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2110:	8d 85       	ldd	r24, Y+13	; 0x0d
    2112:	9e 85       	ldd	r25, Y+14	; 0x0e
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	4a ef       	ldi	r20, 0xFA	; 250
    211a:	54 e4       	ldi	r21, 0x44	; 68
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	8f 83       	std	Y+7, r24	; 0x07
    2126:	98 87       	std	Y+8, r25	; 0x08
    2128:	a9 87       	std	Y+9, r26	; 0x09
    212a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    212c:	6f 81       	ldd	r22, Y+7	; 0x07
    212e:	78 85       	ldd	r23, Y+8	; 0x08
    2130:	89 85       	ldd	r24, Y+9	; 0x09
    2132:	9a 85       	ldd	r25, Y+10	; 0x0a
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e8       	ldi	r20, 0x80	; 128
    213a:	5f e3       	ldi	r21, 0x3F	; 63
    213c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2140:	88 23       	and	r24, r24
    2142:	2c f4       	brge	.+10     	; 0x214e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	9e 83       	std	Y+6, r25	; 0x06
    214a:	8d 83       	std	Y+5, r24	; 0x05
    214c:	3f c0       	rjmp	.+126    	; 0x21cc <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    214e:	6f 81       	ldd	r22, Y+7	; 0x07
    2150:	78 85       	ldd	r23, Y+8	; 0x08
    2152:	89 85       	ldd	r24, Y+9	; 0x09
    2154:	9a 85       	ldd	r25, Y+10	; 0x0a
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	3f ef       	ldi	r19, 0xFF	; 255
    215a:	4f e7       	ldi	r20, 0x7F	; 127
    215c:	57 e4       	ldi	r21, 0x47	; 71
    215e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2162:	18 16       	cp	r1, r24
    2164:	4c f5       	brge	.+82     	; 0x21b8 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2166:	6b 85       	ldd	r22, Y+11	; 0x0b
    2168:	7c 85       	ldd	r23, Y+12	; 0x0c
    216a:	8d 85       	ldd	r24, Y+13	; 0x0d
    216c:	9e 85       	ldd	r25, Y+14	; 0x0e
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e2       	ldi	r20, 0x20	; 32
    2174:	51 e4       	ldi	r21, 0x41	; 65
    2176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	bc 01       	movw	r22, r24
    2180:	cd 01       	movw	r24, r26
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9e 83       	std	Y+6, r25	; 0x06
    218c:	8d 83       	std	Y+5, r24	; 0x05
    218e:	0f c0       	rjmp	.+30     	; 0x21ae <LCD_displayCharacter+0x39a>
    2190:	88 ec       	ldi	r24, 0xC8	; 200
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9c 83       	std	Y+4, r25	; 0x04
    2196:	8b 83       	std	Y+3, r24	; 0x03
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	9c 81       	ldd	r25, Y+4	; 0x04
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <LCD_displayCharacter+0x388>
    21a0:	9c 83       	std	Y+4, r25	; 0x04
    21a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a4:	8d 81       	ldd	r24, Y+5	; 0x05
    21a6:	9e 81       	ldd	r25, Y+6	; 0x06
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	9e 83       	std	Y+6, r25	; 0x06
    21ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ae:	8d 81       	ldd	r24, Y+5	; 0x05
    21b0:	9e 81       	ldd	r25, Y+6	; 0x06
    21b2:	00 97       	sbiw	r24, 0x00	; 0
    21b4:	69 f7       	brne	.-38     	; 0x2190 <LCD_displayCharacter+0x37c>
    21b6:	14 c0       	rjmp	.+40     	; 0x21e0 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ba:	78 85       	ldd	r23, Y+8	; 0x08
    21bc:	89 85       	ldd	r24, Y+9	; 0x09
    21be:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	9e 83       	std	Y+6, r25	; 0x06
    21ca:	8d 83       	std	Y+5, r24	; 0x05
    21cc:	8d 81       	ldd	r24, Y+5	; 0x05
    21ce:	9e 81       	ldd	r25, Y+6	; 0x06
    21d0:	9a 83       	std	Y+2, r25	; 0x02
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	9a 81       	ldd	r25, Y+2	; 0x02
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <LCD_displayCharacter+0x3c4>
    21dc:	9a 83       	std	Y+2, r25	; 0x02
    21de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    21e0:	e9 96       	adiw	r28, 0x39	; 57
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	cd bf       	out	0x3d, r28	; 61
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <LCD_displayString+0x6>
    21f8:	0f 92       	push	r0
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	9b 83       	std	Y+3, r25	; 0x03
    2200:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2202:	19 82       	std	Y+1, r1	; 0x01
    2204:	0e c0       	rjmp	.+28     	; 0x2222 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	9b 81       	ldd	r25, Y+3	; 0x03
    2210:	fc 01       	movw	r30, r24
    2212:	e2 0f       	add	r30, r18
    2214:	f3 1f       	adc	r31, r19
    2216:	80 81       	ld	r24, Z
    2218:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <LCD_displayCharacter>
		i++;
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	8f 5f       	subi	r24, 0xFF	; 255
    2220:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	28 2f       	mov	r18, r24
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	9b 81       	ldd	r25, Y+3	; 0x03
    222c:	fc 01       	movw	r30, r24
    222e:	e2 0f       	add	r30, r18
    2230:	f3 1f       	adc	r31, r19
    2232:	80 81       	ld	r24, Z
    2234:	88 23       	and	r24, r24
    2236:	39 f7       	brne	.-50     	; 0x2206 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	00 d0       	rcall	.+0      	; 0x224a <LCD_moveCursor+0x6>
    224a:	00 d0       	rcall	.+0      	; 0x224c <LCD_moveCursor+0x8>
    224c:	0f 92       	push	r0
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
    2252:	8a 83       	std	Y+2, r24	; 0x02
    2254:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	28 2f       	mov	r18, r24
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	3d 83       	std	Y+5, r19	; 0x05
    225e:	2c 83       	std	Y+4, r18	; 0x04
    2260:	8c 81       	ldd	r24, Y+4	; 0x04
    2262:	9d 81       	ldd	r25, Y+5	; 0x05
    2264:	81 30       	cpi	r24, 0x01	; 1
    2266:	91 05       	cpc	r25, r1
    2268:	c1 f0       	breq	.+48     	; 0x229a <LCD_moveCursor+0x56>
    226a:	2c 81       	ldd	r18, Y+4	; 0x04
    226c:	3d 81       	ldd	r19, Y+5	; 0x05
    226e:	22 30       	cpi	r18, 0x02	; 2
    2270:	31 05       	cpc	r19, r1
    2272:	2c f4       	brge	.+10     	; 0x227e <LCD_moveCursor+0x3a>
    2274:	8c 81       	ldd	r24, Y+4	; 0x04
    2276:	9d 81       	ldd	r25, Y+5	; 0x05
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	61 f0       	breq	.+24     	; 0x2294 <LCD_moveCursor+0x50>
    227c:	19 c0       	rjmp	.+50     	; 0x22b0 <LCD_moveCursor+0x6c>
    227e:	2c 81       	ldd	r18, Y+4	; 0x04
    2280:	3d 81       	ldd	r19, Y+5	; 0x05
    2282:	22 30       	cpi	r18, 0x02	; 2
    2284:	31 05       	cpc	r19, r1
    2286:	69 f0       	breq	.+26     	; 0x22a2 <LCD_moveCursor+0x5e>
    2288:	8c 81       	ldd	r24, Y+4	; 0x04
    228a:	9d 81       	ldd	r25, Y+5	; 0x05
    228c:	83 30       	cpi	r24, 0x03	; 3
    228e:	91 05       	cpc	r25, r1
    2290:	61 f0       	breq	.+24     	; 0x22aa <LCD_moveCursor+0x66>
    2292:	0e c0       	rjmp	.+28     	; 0x22b0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	89 83       	std	Y+1, r24	; 0x01
    2298:	0b c0       	rjmp	.+22     	; 0x22b0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	80 5c       	subi	r24, 0xC0	; 192
    229e:	89 83       	std	Y+1, r24	; 0x01
    22a0:	07 c0       	rjmp	.+14     	; 0x22b0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	80 5f       	subi	r24, 0xF0	; 240
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	03 c0       	rjmp	.+6      	; 0x22b0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	80 5b       	subi	r24, 0xB0	; 176
    22ae:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	80 68       	ori	r24, 0x80	; 128
    22b4:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_sendCommand>
}
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <LCD_displayStringRowColumn+0x6>
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <LCD_displayStringRowColumn+0x8>
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	89 83       	std	Y+1, r24	; 0x01
    22d6:	6a 83       	std	Y+2, r22	; 0x02
    22d8:	5c 83       	std	Y+4, r21	; 0x04
    22da:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	6a 81       	ldd	r22, Y+2	; 0x02
    22e0:	0e 94 22 11 	call	0x2244	; 0x2244 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	9c 81       	ldd	r25, Y+4	; 0x04
    22e8:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_displayString>
}
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	62 97       	sbiw	r28, 0x12	; 18
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	9a 8b       	std	Y+18, r25	; 0x12
    2310:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2312:	89 89       	ldd	r24, Y+17	; 0x11
    2314:	9a 89       	ldd	r25, Y+18	; 0x12
    2316:	9e 01       	movw	r18, r28
    2318:	2f 5f       	subi	r18, 0xFF	; 255
    231a:	3f 4f       	sbci	r19, 0xFF	; 255
    231c:	b9 01       	movw	r22, r18
    231e:	4a e0       	ldi	r20, 0x0A	; 10
    2320:	50 e0       	ldi	r21, 0x00	; 0
    2322:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <itoa>
   LCD_displayString(buff); /* Display the string */
    2326:	ce 01       	movw	r24, r28
    2328:	01 96       	adiw	r24, 0x01	; 1
    232a:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_displayString>
}
    232e:	62 96       	adiw	r28, 0x12	; 18
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_sendCommand>
}
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <main>:
 * It is called whenever Timer1 overflows or a compare match occurs.
 * It increments the volatile variable timer1_ticks.
 */
void timer1TickIncrement(void);

int main(void) {
    2354:	0f 93       	push	r16
    2356:	1f 93       	push	r17
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
    2360:	cb 5b       	subi	r28, 0xBB	; 187
    2362:	d0 40       	sbci	r29, 0x00	; 0
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	f8 94       	cli
    2368:	de bf       	out	0x3e, r29	; 62
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	cd bf       	out	0x3d, r28	; 61
	uint8 tries = 0; // Number of password entry attempts
    236e:	fe 01       	movw	r30, r28
    2370:	e3 55       	subi	r30, 0x53	; 83
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	10 82       	st	Z, r1
	uint8 is_matched_f = 1; // Flag to indicate if passwords match
    2376:	fe 01       	movw	r30, r28
    2378:	e4 55       	subi	r30, 0x54	; 84
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	80 83       	st	Z, r24
	uint8 is_password_set_f = 0; // Flag to indicate if password is already set
    2380:	fe 01       	movw	r30, r28
    2382:	e5 55       	subi	r30, 0x55	; 85
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	10 82       	st	Z, r1
	uint8 is_password_correct_f = 0; // Flag to indicate if entered password is correct
    2388:	fe 01       	movw	r30, r28
    238a:	e6 55       	subi	r30, 0x56	; 86
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	10 82       	st	Z, r1

	// UART Configuration
	UART_ConfigType UART_config = { .bit_data = EIGHT_BITS, .parity = NO_PARITY,
			.stop_bit = ONE_STOP_BIT, .baud_rate = 9600 };
    2390:	ce 01       	movw	r24, r28
    2392:	82 55       	subi	r24, 0x52	; 82
    2394:	9f 4f       	sbci	r25, 0xFF	; 255
    2396:	c9 54       	subi	r28, 0x49	; 73
    2398:	df 4f       	sbci	r29, 0xFF	; 255
    239a:	99 83       	std	Y+1, r25	; 0x01
    239c:	88 83       	st	Y, r24
    239e:	c7 5b       	subi	r28, 0xB7	; 183
    23a0:	d0 40       	sbci	r29, 0x00	; 0
    23a2:	21 e3       	ldi	r18, 0x31	; 49
    23a4:	31 e0       	ldi	r19, 0x01	; 1
    23a6:	c7 54       	subi	r28, 0x47	; 71
    23a8:	df 4f       	sbci	r29, 0xFF	; 255
    23aa:	39 83       	std	Y+1, r19	; 0x01
    23ac:	28 83       	st	Y, r18
    23ae:	c9 5b       	subi	r28, 0xB9	; 185
    23b0:	d0 40       	sbci	r29, 0x00	; 0
    23b2:	37 e0       	ldi	r19, 0x07	; 7
    23b4:	c5 54       	subi	r28, 0x45	; 69
    23b6:	df 4f       	sbci	r29, 0xFF	; 255
    23b8:	38 83       	st	Y, r19
    23ba:	cb 5b       	subi	r28, 0xBB	; 187
    23bc:	d0 40       	sbci	r29, 0x00	; 0
    23be:	c7 54       	subi	r28, 0x47	; 71
    23c0:	df 4f       	sbci	r29, 0xFF	; 255
    23c2:	e8 81       	ld	r30, Y
    23c4:	f9 81       	ldd	r31, Y+1	; 0x01
    23c6:	c9 5b       	subi	r28, 0xB9	; 185
    23c8:	d0 40       	sbci	r29, 0x00	; 0
    23ca:	00 80       	ld	r0, Z
    23cc:	c7 54       	subi	r28, 0x47	; 71
    23ce:	df 4f       	sbci	r29, 0xFF	; 255
    23d0:	28 81       	ld	r18, Y
    23d2:	39 81       	ldd	r19, Y+1	; 0x01
    23d4:	c9 5b       	subi	r28, 0xB9	; 185
    23d6:	d0 40       	sbci	r29, 0x00	; 0
    23d8:	2f 5f       	subi	r18, 0xFF	; 255
    23da:	3f 4f       	sbci	r19, 0xFF	; 255
    23dc:	c7 54       	subi	r28, 0x47	; 71
    23de:	df 4f       	sbci	r29, 0xFF	; 255
    23e0:	39 83       	std	Y+1, r19	; 0x01
    23e2:	28 83       	st	Y, r18
    23e4:	c9 5b       	subi	r28, 0xB9	; 185
    23e6:	d0 40       	sbci	r29, 0x00	; 0
    23e8:	c9 54       	subi	r28, 0x49	; 73
    23ea:	df 4f       	sbci	r29, 0xFF	; 255
    23ec:	e8 81       	ld	r30, Y
    23ee:	f9 81       	ldd	r31, Y+1	; 0x01
    23f0:	c7 5b       	subi	r28, 0xB7	; 183
    23f2:	d0 40       	sbci	r29, 0x00	; 0
    23f4:	00 82       	st	Z, r0
    23f6:	c9 54       	subi	r28, 0x49	; 73
    23f8:	df 4f       	sbci	r29, 0xFF	; 255
    23fa:	28 81       	ld	r18, Y
    23fc:	39 81       	ldd	r19, Y+1	; 0x01
    23fe:	c7 5b       	subi	r28, 0xB7	; 183
    2400:	d0 40       	sbci	r29, 0x00	; 0
    2402:	2f 5f       	subi	r18, 0xFF	; 255
    2404:	3f 4f       	sbci	r19, 0xFF	; 255
    2406:	c9 54       	subi	r28, 0x49	; 73
    2408:	df 4f       	sbci	r29, 0xFF	; 255
    240a:	39 83       	std	Y+1, r19	; 0x01
    240c:	28 83       	st	Y, r18
    240e:	c7 5b       	subi	r28, 0xB7	; 183
    2410:	d0 40       	sbci	r29, 0x00	; 0
    2412:	c5 54       	subi	r28, 0x45	; 69
    2414:	df 4f       	sbci	r29, 0xFF	; 255
    2416:	38 81       	ld	r19, Y
    2418:	cb 5b       	subi	r28, 0xBB	; 187
    241a:	d0 40       	sbci	r29, 0x00	; 0
    241c:	31 50       	subi	r19, 0x01	; 1
    241e:	c5 54       	subi	r28, 0x45	; 69
    2420:	df 4f       	sbci	r29, 0xFF	; 255
    2422:	38 83       	st	Y, r19
    2424:	cb 5b       	subi	r28, 0xBB	; 187
    2426:	d0 40       	sbci	r29, 0x00	; 0
    2428:	c5 54       	subi	r28, 0x45	; 69
    242a:	df 4f       	sbci	r29, 0xFF	; 255
    242c:	88 81       	ld	r24, Y
    242e:	cb 5b       	subi	r28, 0xBB	; 187
    2430:	d0 40       	sbci	r29, 0x00	; 0
    2432:	88 23       	and	r24, r24
    2434:	21 f6       	brne	.-120    	; 0x23be <main+0x6a>

	SREG |= 1 << 7; // Enable global interrupts
    2436:	af e5       	ldi	r26, 0x5F	; 95
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	ef e5       	ldi	r30, 0x5F	; 95
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	80 68       	ori	r24, 0x80	; 128
    2442:	8c 93       	st	X, r24
	UART_init(&UART_config); // Initialize UART communication
    2444:	ce 01       	movw	r24, r28
    2446:	82 55       	subi	r24, 0x52	; 82
    2448:	9f 4f       	sbci	r25, 0xFF	; 255
    244a:	0e 94 cb 09 	call	0x1396	; 0x1396 <UART_init>
	LCD_init(); // Initialize LCD
    244e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_init>
	Timer1_setCallBack(timer1TickIncrement); // Set Timer1 callback function for ticks
    2452:	8d e9       	ldi	r24, 0x9D	; 157
    2454:	9c e1       	ldi	r25, 0x1C	; 28
    2456:	0e 94 5f 09 	call	0x12be	; 0x12be <Timer1_setCallBack>

	LCD_displayStringRowColumn(0,3,"Door  Lock");
    245a:	20 e6       	ldi	r18, 0x60	; 96
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	63 e0       	ldi	r22, 0x03	; 3
    2462:	a9 01       	movw	r20, r18
    2464:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,5, "System");
    2468:	2b e6       	ldi	r18, 0x6B	; 107
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	65 e0       	ldi	r22, 0x05	; 5
    2470:	a9 01       	movw	r20, r18
    2472:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>
    2476:	fe 01       	movw	r30, r28
    2478:	eb 55       	subi	r30, 0x5B	; 91
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	aa ef       	ldi	r26, 0xFA	; 250
    2482:	b4 e4       	ldi	r27, 0x44	; 68
    2484:	80 83       	st	Z, r24
    2486:	91 83       	std	Z+1, r25	; 0x01
    2488:	a2 83       	std	Z+2, r26	; 0x02
    248a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248c:	8e 01       	movw	r16, r28
    248e:	0f 55       	subi	r16, 0x5F	; 95
    2490:	1f 4f       	sbci	r17, 0xFF	; 255
    2492:	fe 01       	movw	r30, r28
    2494:	eb 55       	subi	r30, 0x5B	; 91
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	60 81       	ld	r22, Z
    249a:	71 81       	ldd	r23, Z+1	; 0x01
    249c:	82 81       	ldd	r24, Z+2	; 0x02
    249e:	93 81       	ldd	r25, Z+3	; 0x03
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	4a ef       	ldi	r20, 0xFA	; 250
    24a6:	54 e4       	ldi	r21, 0x44	; 68
    24a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	f8 01       	movw	r30, r16
    24b2:	80 83       	st	Z, r24
    24b4:	91 83       	std	Z+1, r25	; 0x01
    24b6:	a2 83       	std	Z+2, r26	; 0x02
    24b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ba:	fe 01       	movw	r30, r28
    24bc:	ef 55       	subi	r30, 0x5F	; 95
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	60 81       	ld	r22, Z
    24c2:	71 81       	ldd	r23, Z+1	; 0x01
    24c4:	82 81       	ldd	r24, Z+2	; 0x02
    24c6:	93 81       	ldd	r25, Z+3	; 0x03
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e8       	ldi	r20, 0x80	; 128
    24ce:	5f e3       	ldi	r21, 0x3F	; 63
    24d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	44 f4       	brge	.+16     	; 0x24e8 <main+0x194>
		__ticks = 1;
    24d8:	fe 01       	movw	r30, r28
    24da:	e1 56       	subi	r30, 0x61	; 97
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24
    24e6:	64 c0       	rjmp	.+200    	; 0x25b0 <main+0x25c>
	else if (__tmp > 65535)
    24e8:	fe 01       	movw	r30, r28
    24ea:	ef 55       	subi	r30, 0x5F	; 95
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	60 81       	ld	r22, Z
    24f0:	71 81       	ldd	r23, Z+1	; 0x01
    24f2:	82 81       	ldd	r24, Z+2	; 0x02
    24f4:	93 81       	ldd	r25, Z+3	; 0x03
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	3f ef       	ldi	r19, 0xFF	; 255
    24fa:	4f e7       	ldi	r20, 0x7F	; 127
    24fc:	57 e4       	ldi	r21, 0x47	; 71
    24fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2502:	18 16       	cp	r1, r24
    2504:	0c f0       	brlt	.+2      	; 0x2508 <main+0x1b4>
    2506:	43 c0       	rjmp	.+134    	; 0x258e <main+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2508:	fe 01       	movw	r30, r28
    250a:	eb 55       	subi	r30, 0x5B	; 91
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	93 81       	ldd	r25, Z+3	; 0x03
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e2       	ldi	r20, 0x20	; 32
    251c:	51 e4       	ldi	r21, 0x41	; 65
    251e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	8e 01       	movw	r16, r28
    2528:	01 56       	subi	r16, 0x61	; 97
    252a:	1f 4f       	sbci	r17, 0xFF	; 255
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	f8 01       	movw	r30, r16
    253a:	91 83       	std	Z+1, r25	; 0x01
    253c:	80 83       	st	Z, r24
    253e:	1f c0       	rjmp	.+62     	; 0x257e <main+0x22a>
    2540:	fe 01       	movw	r30, r28
    2542:	e3 56       	subi	r30, 0x63	; 99
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	88 ec       	ldi	r24, 0xC8	; 200
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	80 83       	st	Z, r24
    254e:	fe 01       	movw	r30, r28
    2550:	e3 56       	subi	r30, 0x63	; 99
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	80 81       	ld	r24, Z
    2556:	91 81       	ldd	r25, Z+1	; 0x01
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	f1 f7       	brne	.-4      	; 0x2558 <main+0x204>
    255c:	fe 01       	movw	r30, r28
    255e:	e3 56       	subi	r30, 0x63	; 99
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2566:	de 01       	movw	r26, r28
    2568:	a1 56       	subi	r26, 0x61	; 97
    256a:	bf 4f       	sbci	r27, 0xFF	; 255
    256c:	fe 01       	movw	r30, r28
    256e:	e1 56       	subi	r30, 0x61	; 97
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	80 81       	ld	r24, Z
    2574:	91 81       	ldd	r25, Z+1	; 0x01
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	11 96       	adiw	r26, 0x01	; 1
    257a:	9c 93       	st	X, r25
    257c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257e:	fe 01       	movw	r30, r28
    2580:	e1 56       	subi	r30, 0x61	; 97
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	80 81       	ld	r24, Z
    2586:	91 81       	ldd	r25, Z+1	; 0x01
    2588:	00 97       	sbiw	r24, 0x00	; 0
    258a:	d1 f6       	brne	.-76     	; 0x2540 <main+0x1ec>
    258c:	27 c0       	rjmp	.+78     	; 0x25dc <main+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258e:	8e 01       	movw	r16, r28
    2590:	01 56       	subi	r16, 0x61	; 97
    2592:	1f 4f       	sbci	r17, 0xFF	; 255
    2594:	fe 01       	movw	r30, r28
    2596:	ef 55       	subi	r30, 0x5F	; 95
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	60 81       	ld	r22, Z
    259c:	71 81       	ldd	r23, Z+1	; 0x01
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	f8 01       	movw	r30, r16
    25ac:	91 83       	std	Z+1, r25	; 0x01
    25ae:	80 83       	st	Z, r24
    25b0:	de 01       	movw	r26, r28
    25b2:	a5 56       	subi	r26, 0x65	; 101
    25b4:	bf 4f       	sbci	r27, 0xFF	; 255
    25b6:	fe 01       	movw	r30, r28
    25b8:	e1 56       	subi	r30, 0x61	; 97
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 81       	ld	r24, Z
    25be:	91 81       	ldd	r25, Z+1	; 0x01
    25c0:	8d 93       	st	X+, r24
    25c2:	9c 93       	st	X, r25
    25c4:	fe 01       	movw	r30, r28
    25c6:	e5 56       	subi	r30, 0x65	; 101
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	80 81       	ld	r24, Z
    25cc:	91 81       	ldd	r25, Z+1	; 0x01
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <main+0x27a>
    25d2:	fe 01       	movw	r30, r28
    25d4:	e5 56       	subi	r30, 0x65	; 101
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	91 83       	std	Z+1, r25	; 0x01
    25da:	80 83       	st	Z, r24
	_delay_ms(2000);
	LCD_clearScreen();
    25dc:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"By:");
    25e0:	22 e7       	ldi	r18, 0x72	; 114
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	a9 01       	movw	r20, r18
    25ea:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,1,"Diaa  Abossrie");
    25ee:	26 e7       	ldi	r18, 0x76	; 118
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	61 e0       	ldi	r22, 0x01	; 1
    25f6:	a9 01       	movw	r20, r18
    25f8:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>
    25fc:	fe 01       	movw	r30, r28
    25fe:	e9 56       	subi	r30, 0x69	; 105
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	aa ef       	ldi	r26, 0xFA	; 250
    2608:	b4 e4       	ldi	r27, 0x44	; 68
    260a:	80 83       	st	Z, r24
    260c:	91 83       	std	Z+1, r25	; 0x01
    260e:	a2 83       	std	Z+2, r26	; 0x02
    2610:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2612:	8e 01       	movw	r16, r28
    2614:	0d 56       	subi	r16, 0x6D	; 109
    2616:	1f 4f       	sbci	r17, 0xFF	; 255
    2618:	fe 01       	movw	r30, r28
    261a:	e9 56       	subi	r30, 0x69	; 105
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	60 81       	ld	r22, Z
    2620:	71 81       	ldd	r23, Z+1	; 0x01
    2622:	82 81       	ldd	r24, Z+2	; 0x02
    2624:	93 81       	ldd	r25, Z+3	; 0x03
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	4a ef       	ldi	r20, 0xFA	; 250
    262c:	54 e4       	ldi	r21, 0x44	; 68
    262e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	f8 01       	movw	r30, r16
    2638:	80 83       	st	Z, r24
    263a:	91 83       	std	Z+1, r25	; 0x01
    263c:	a2 83       	std	Z+2, r26	; 0x02
    263e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2640:	fe 01       	movw	r30, r28
    2642:	ed 56       	subi	r30, 0x6D	; 109
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	60 81       	ld	r22, Z
    2648:	71 81       	ldd	r23, Z+1	; 0x01
    264a:	82 81       	ldd	r24, Z+2	; 0x02
    264c:	93 81       	ldd	r25, Z+3	; 0x03
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e8       	ldi	r20, 0x80	; 128
    2654:	5f e3       	ldi	r21, 0x3F	; 63
    2656:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    265a:	88 23       	and	r24, r24
    265c:	44 f4       	brge	.+16     	; 0x266e <main+0x31a>
		__ticks = 1;
    265e:	fe 01       	movw	r30, r28
    2660:	ef 56       	subi	r30, 0x6F	; 111
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	91 83       	std	Z+1, r25	; 0x01
    266a:	80 83       	st	Z, r24
    266c:	64 c0       	rjmp	.+200    	; 0x2736 <main+0x3e2>
	else if (__tmp > 65535)
    266e:	fe 01       	movw	r30, r28
    2670:	ed 56       	subi	r30, 0x6D	; 109
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	60 81       	ld	r22, Z
    2676:	71 81       	ldd	r23, Z+1	; 0x01
    2678:	82 81       	ldd	r24, Z+2	; 0x02
    267a:	93 81       	ldd	r25, Z+3	; 0x03
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	3f ef       	ldi	r19, 0xFF	; 255
    2680:	4f e7       	ldi	r20, 0x7F	; 127
    2682:	57 e4       	ldi	r21, 0x47	; 71
    2684:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2688:	18 16       	cp	r1, r24
    268a:	0c f0       	brlt	.+2      	; 0x268e <main+0x33a>
    268c:	43 c0       	rjmp	.+134    	; 0x2714 <main+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268e:	fe 01       	movw	r30, r28
    2690:	e9 56       	subi	r30, 0x69	; 105
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	60 81       	ld	r22, Z
    2696:	71 81       	ldd	r23, Z+1	; 0x01
    2698:	82 81       	ldd	r24, Z+2	; 0x02
    269a:	93 81       	ldd	r25, Z+3	; 0x03
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e2       	ldi	r20, 0x20	; 32
    26a2:	51 e4       	ldi	r21, 0x41	; 65
    26a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	8e 01       	movw	r16, r28
    26ae:	0f 56       	subi	r16, 0x6F	; 111
    26b0:	1f 4f       	sbci	r17, 0xFF	; 255
    26b2:	bc 01       	movw	r22, r24
    26b4:	cd 01       	movw	r24, r26
    26b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	f8 01       	movw	r30, r16
    26c0:	91 83       	std	Z+1, r25	; 0x01
    26c2:	80 83       	st	Z, r24
    26c4:	1f c0       	rjmp	.+62     	; 0x2704 <main+0x3b0>
    26c6:	fe 01       	movw	r30, r28
    26c8:	e1 57       	subi	r30, 0x71	; 113
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	88 ec       	ldi	r24, 0xC8	; 200
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	80 83       	st	Z, r24
    26d4:	fe 01       	movw	r30, r28
    26d6:	e1 57       	subi	r30, 0x71	; 113
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	80 81       	ld	r24, Z
    26dc:	91 81       	ldd	r25, Z+1	; 0x01
    26de:	01 97       	sbiw	r24, 0x01	; 1
    26e0:	f1 f7       	brne	.-4      	; 0x26de <main+0x38a>
    26e2:	fe 01       	movw	r30, r28
    26e4:	e1 57       	subi	r30, 0x71	; 113
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ec:	de 01       	movw	r26, r28
    26ee:	af 56       	subi	r26, 0x6F	; 111
    26f0:	bf 4f       	sbci	r27, 0xFF	; 255
    26f2:	fe 01       	movw	r30, r28
    26f4:	ef 56       	subi	r30, 0x6F	; 111
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	80 81       	ld	r24, Z
    26fa:	91 81       	ldd	r25, Z+1	; 0x01
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	11 96       	adiw	r26, 0x01	; 1
    2700:	9c 93       	st	X, r25
    2702:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2704:	fe 01       	movw	r30, r28
    2706:	ef 56       	subi	r30, 0x6F	; 111
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	80 81       	ld	r24, Z
    270c:	91 81       	ldd	r25, Z+1	; 0x01
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	d1 f6       	brne	.-76     	; 0x26c6 <main+0x372>
    2712:	27 c0       	rjmp	.+78     	; 0x2762 <main+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2714:	8e 01       	movw	r16, r28
    2716:	0f 56       	subi	r16, 0x6F	; 111
    2718:	1f 4f       	sbci	r17, 0xFF	; 255
    271a:	fe 01       	movw	r30, r28
    271c:	ed 56       	subi	r30, 0x6D	; 109
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	60 81       	ld	r22, Z
    2722:	71 81       	ldd	r23, Z+1	; 0x01
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	93 81       	ldd	r25, Z+3	; 0x03
    2728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	f8 01       	movw	r30, r16
    2732:	91 83       	std	Z+1, r25	; 0x01
    2734:	80 83       	st	Z, r24
    2736:	de 01       	movw	r26, r28
    2738:	a3 57       	subi	r26, 0x73	; 115
    273a:	bf 4f       	sbci	r27, 0xFF	; 255
    273c:	fe 01       	movw	r30, r28
    273e:	ef 56       	subi	r30, 0x6F	; 111
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	80 81       	ld	r24, Z
    2744:	91 81       	ldd	r25, Z+1	; 0x01
    2746:	8d 93       	st	X+, r24
    2748:	9c 93       	st	X, r25
    274a:	fe 01       	movw	r30, r28
    274c:	e3 57       	subi	r30, 0x73	; 115
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	80 81       	ld	r24, Z
    2752:	91 81       	ldd	r25, Z+1	; 0x01
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <main+0x400>
    2758:	fe 01       	movw	r30, r28
    275a:	e3 57       	subi	r30, 0x73	; 115
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	91 83       	std	Z+1, r25	; 0x01
    2760:	80 83       	st	Z, r24
	_delay_ms(2000);

	UART_sendByte(IS_PASSWORD_SETTED); // Send request to check if password is already set
    2762:	81 e5       	ldi	r24, 0x51	; 81
    2764:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <UART_sendByte>

	// Check the response received from the Control_ECU
	if (UART_recieveByte() == SETTED) {
    2768:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <UART_recieveByte>
    276c:	87 35       	cpi	r24, 0x57	; 87
    276e:	29 f4       	brne	.+10     	; 0x277a <main+0x426>
		is_password_set_f = 1; // Set flag indicating password is already set
    2770:	fe 01       	movw	r30, r28
    2772:	e5 55       	subi	r30, 0x55	; 85
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	80 83       	st	Z, r24
	}

	while (1) {
		if (is_password_set_f) { // Check if password is already set
    277a:	fe 01       	movw	r30, r28
    277c:	e5 55       	subi	r30, 0x55	; 85
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	80 81       	ld	r24, Z
    2782:	88 23       	and	r24, r24
    2784:	09 f4       	brne	.+2      	; 0x2788 <main+0x434>
    2786:	c3 c6       	rjmp	.+3462   	; 0x350e <main+0x11ba>
			tries = 0; // Reset number of password entry attempts
    2788:	fe 01       	movw	r30, r28
    278a:	e3 55       	subi	r30, 0x53	; 83
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	10 82       	st	Z, r1
			LCD_clearScreen(); // Clear the LCD screen
    2790:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "+ : Open Door"); // Display option to open the door
    2794:	25 e8       	ldi	r18, 0x85	; 133
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	a9 01       	movw	r20, r18
    279e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "- : Change Pass"); // Display option to change the password
    27a2:	23 e9       	ldi	r18, 0x93	; 147
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	60 e0       	ldi	r22, 0x00	; 0
    27aa:	a9 01       	movw	r20, r18
    27ac:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>

			uint8 key = KEYPAD_getPressedKey(); // Get the pressed key from the keypad
    27b0:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <KEYPAD_getPressedKey>
    27b4:	fe 01       	movw	r30, r28
    27b6:	e7 55       	subi	r30, 0x57	; 87
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	80 83       	st	Z, r24
    27bc:	fe 01       	movw	r30, r28
    27be:	e7 57       	subi	r30, 0x77	; 119
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	a8 ec       	ldi	r26, 0xC8	; 200
    27c8:	b2 e4       	ldi	r27, 0x42	; 66
    27ca:	80 83       	st	Z, r24
    27cc:	91 83       	std	Z+1, r25	; 0x01
    27ce:	a2 83       	std	Z+2, r26	; 0x02
    27d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d2:	8e 01       	movw	r16, r28
    27d4:	0b 57       	subi	r16, 0x7B	; 123
    27d6:	1f 4f       	sbci	r17, 0xFF	; 255
    27d8:	fe 01       	movw	r30, r28
    27da:	e7 57       	subi	r30, 0x77	; 119
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	60 81       	ld	r22, Z
    27e0:	71 81       	ldd	r23, Z+1	; 0x01
    27e2:	82 81       	ldd	r24, Z+2	; 0x02
    27e4:	93 81       	ldd	r25, Z+3	; 0x03
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	4a ef       	ldi	r20, 0xFA	; 250
    27ec:	54 e4       	ldi	r21, 0x44	; 68
    27ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	f8 01       	movw	r30, r16
    27f8:	80 83       	st	Z, r24
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	a2 83       	std	Z+2, r26	; 0x02
    27fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2800:	fe 01       	movw	r30, r28
    2802:	eb 57       	subi	r30, 0x7B	; 123
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	60 81       	ld	r22, Z
    2808:	71 81       	ldd	r23, Z+1	; 0x01
    280a:	82 81       	ldd	r24, Z+2	; 0x02
    280c:	93 81       	ldd	r25, Z+3	; 0x03
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	40 e8       	ldi	r20, 0x80	; 128
    2814:	5f e3       	ldi	r21, 0x3F	; 63
    2816:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    281a:	88 23       	and	r24, r24
    281c:	44 f4       	brge	.+16     	; 0x282e <main+0x4da>
		__ticks = 1;
    281e:	fe 01       	movw	r30, r28
    2820:	ed 57       	subi	r30, 0x7D	; 125
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	91 83       	std	Z+1, r25	; 0x01
    282a:	80 83       	st	Z, r24
    282c:	64 c0       	rjmp	.+200    	; 0x28f6 <main+0x5a2>
	else if (__tmp > 65535)
    282e:	fe 01       	movw	r30, r28
    2830:	eb 57       	subi	r30, 0x7B	; 123
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	60 81       	ld	r22, Z
    2836:	71 81       	ldd	r23, Z+1	; 0x01
    2838:	82 81       	ldd	r24, Z+2	; 0x02
    283a:	93 81       	ldd	r25, Z+3	; 0x03
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	3f ef       	ldi	r19, 0xFF	; 255
    2840:	4f e7       	ldi	r20, 0x7F	; 127
    2842:	57 e4       	ldi	r21, 0x47	; 71
    2844:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2848:	18 16       	cp	r1, r24
    284a:	0c f0       	brlt	.+2      	; 0x284e <main+0x4fa>
    284c:	43 c0       	rjmp	.+134    	; 0x28d4 <main+0x580>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284e:	fe 01       	movw	r30, r28
    2850:	e7 57       	subi	r30, 0x77	; 119
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	60 81       	ld	r22, Z
    2856:	71 81       	ldd	r23, Z+1	; 0x01
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	93 81       	ldd	r25, Z+3	; 0x03
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e2       	ldi	r20, 0x20	; 32
    2862:	51 e4       	ldi	r21, 0x41	; 65
    2864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	8e 01       	movw	r16, r28
    286e:	0d 57       	subi	r16, 0x7D	; 125
    2870:	1f 4f       	sbci	r17, 0xFF	; 255
    2872:	bc 01       	movw	r22, r24
    2874:	cd 01       	movw	r24, r26
    2876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	f8 01       	movw	r30, r16
    2880:	91 83       	std	Z+1, r25	; 0x01
    2882:	80 83       	st	Z, r24
    2884:	1f c0       	rjmp	.+62     	; 0x28c4 <main+0x570>
    2886:	fe 01       	movw	r30, r28
    2888:	ef 57       	subi	r30, 0x7F	; 127
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	88 ec       	ldi	r24, 0xC8	; 200
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	80 83       	st	Z, r24
    2894:	fe 01       	movw	r30, r28
    2896:	ef 57       	subi	r30, 0x7F	; 127
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	80 81       	ld	r24, Z
    289c:	91 81       	ldd	r25, Z+1	; 0x01
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <main+0x54a>
    28a2:	fe 01       	movw	r30, r28
    28a4:	ef 57       	subi	r30, 0x7F	; 127
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	91 83       	std	Z+1, r25	; 0x01
    28aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ac:	de 01       	movw	r26, r28
    28ae:	ad 57       	subi	r26, 0x7D	; 125
    28b0:	bf 4f       	sbci	r27, 0xFF	; 255
    28b2:	fe 01       	movw	r30, r28
    28b4:	ed 57       	subi	r30, 0x7D	; 125
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	80 81       	ld	r24, Z
    28ba:	91 81       	ldd	r25, Z+1	; 0x01
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	11 96       	adiw	r26, 0x01	; 1
    28c0:	9c 93       	st	X, r25
    28c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c4:	fe 01       	movw	r30, r28
    28c6:	ed 57       	subi	r30, 0x7D	; 125
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	80 81       	ld	r24, Z
    28cc:	91 81       	ldd	r25, Z+1	; 0x01
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	d1 f6       	brne	.-76     	; 0x2886 <main+0x532>
    28d2:	28 c0       	rjmp	.+80     	; 0x2924 <main+0x5d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d4:	8e 01       	movw	r16, r28
    28d6:	0d 57       	subi	r16, 0x7D	; 125
    28d8:	1f 4f       	sbci	r17, 0xFF	; 255
    28da:	fe 01       	movw	r30, r28
    28dc:	eb 57       	subi	r30, 0x7B	; 123
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	60 81       	ld	r22, Z
    28e2:	71 81       	ldd	r23, Z+1	; 0x01
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	f8 01       	movw	r30, r16
    28f2:	91 83       	std	Z+1, r25	; 0x01
    28f4:	80 83       	st	Z, r24
    28f6:	de 01       	movw	r26, r28
    28f8:	a1 58       	subi	r26, 0x81	; 129
    28fa:	bf 4f       	sbci	r27, 0xFF	; 255
    28fc:	fe 01       	movw	r30, r28
    28fe:	ed 57       	subi	r30, 0x7D	; 125
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	80 81       	ld	r24, Z
    2904:	91 81       	ldd	r25, Z+1	; 0x01
    2906:	11 96       	adiw	r26, 0x01	; 1
    2908:	9c 93       	st	X, r25
    290a:	8e 93       	st	-X, r24
    290c:	fe 01       	movw	r30, r28
    290e:	e1 58       	subi	r30, 0x81	; 129
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	80 81       	ld	r24, Z
    2914:	91 81       	ldd	r25, Z+1	; 0x01
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <main+0x5c2>
    291a:	fe 01       	movw	r30, r28
    291c:	e1 58       	subi	r30, 0x81	; 129
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	91 83       	std	Z+1, r25	; 0x01
    2922:	80 83       	st	Z, r24
			_delay_ms(100); // Delay for 100 milliseconds (debouncing)

			switch (key) {
    2924:	fe 01       	movw	r30, r28
    2926:	e7 55       	subi	r30, 0x57	; 87
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	80 81       	ld	r24, Z
    292c:	28 2f       	mov	r18, r24
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	cb 54       	subi	r28, 0x4B	; 75
    2932:	df 4f       	sbci	r29, 0xFF	; 255
    2934:	39 83       	std	Y+1, r19	; 0x01
    2936:	28 83       	st	Y, r18
    2938:	c5 5b       	subi	r28, 0xB5	; 181
    293a:	d0 40       	sbci	r29, 0x00	; 0
    293c:	cb 54       	subi	r28, 0x4B	; 75
    293e:	df 4f       	sbci	r29, 0xFF	; 255
    2940:	88 81       	ld	r24, Y
    2942:	99 81       	ldd	r25, Y+1	; 0x01
    2944:	c5 5b       	subi	r28, 0xB5	; 181
    2946:	d0 40       	sbci	r29, 0x00	; 0
    2948:	8b 32       	cpi	r24, 0x2B	; 43
    294a:	91 05       	cpc	r25, r1
    294c:	59 f0       	breq	.+22     	; 0x2964 <main+0x610>
    294e:	cb 54       	subi	r28, 0x4B	; 75
    2950:	df 4f       	sbci	r29, 0xFF	; 255
    2952:	e8 81       	ld	r30, Y
    2954:	f9 81       	ldd	r31, Y+1	; 0x01
    2956:	c5 5b       	subi	r28, 0xB5	; 181
    2958:	d0 40       	sbci	r29, 0x00	; 0
    295a:	ed 32       	cpi	r30, 0x2D	; 45
    295c:	f1 05       	cpc	r31, r1
    295e:	09 f4       	brne	.+2      	; 0x2962 <main+0x60e>
    2960:	91 c3       	rjmp	.+1826   	; 0x3084 <main+0xd30>
    2962:	0b cf       	rjmp	.-490    	; 0x277a <main+0x426>
    2964:	fe 01       	movw	r30, r28
    2966:	e5 58       	subi	r30, 0x85	; 133
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	a8 e4       	ldi	r26, 0x48	; 72
    2970:	b3 e4       	ldi	r27, 0x43	; 67
    2972:	80 83       	st	Z, r24
    2974:	91 83       	std	Z+1, r25	; 0x01
    2976:	a2 83       	std	Z+2, r26	; 0x02
    2978:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297a:	8e 01       	movw	r16, r28
    297c:	09 58       	subi	r16, 0x89	; 137
    297e:	1f 4f       	sbci	r17, 0xFF	; 255
    2980:	fe 01       	movw	r30, r28
    2982:	e5 58       	subi	r30, 0x85	; 133
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	60 81       	ld	r22, Z
    2988:	71 81       	ldd	r23, Z+1	; 0x01
    298a:	82 81       	ldd	r24, Z+2	; 0x02
    298c:	93 81       	ldd	r25, Z+3	; 0x03
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	4a ef       	ldi	r20, 0xFA	; 250
    2994:	54 e4       	ldi	r21, 0x44	; 68
    2996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	f8 01       	movw	r30, r16
    29a0:	80 83       	st	Z, r24
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	a2 83       	std	Z+2, r26	; 0x02
    29a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29a8:	fe 01       	movw	r30, r28
    29aa:	e9 58       	subi	r30, 0x89	; 137
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	60 81       	ld	r22, Z
    29b0:	71 81       	ldd	r23, Z+1	; 0x01
    29b2:	82 81       	ldd	r24, Z+2	; 0x02
    29b4:	93 81       	ldd	r25, Z+3	; 0x03
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e8       	ldi	r20, 0x80	; 128
    29bc:	5f e3       	ldi	r21, 0x3F	; 63
    29be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29c2:	88 23       	and	r24, r24
    29c4:	44 f4       	brge	.+16     	; 0x29d6 <main+0x682>
		__ticks = 1;
    29c6:	fe 01       	movw	r30, r28
    29c8:	eb 58       	subi	r30, 0x8B	; 139
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	91 83       	std	Z+1, r25	; 0x01
    29d2:	80 83       	st	Z, r24
    29d4:	64 c0       	rjmp	.+200    	; 0x2a9e <main+0x74a>
	else if (__tmp > 65535)
    29d6:	fe 01       	movw	r30, r28
    29d8:	e9 58       	subi	r30, 0x89	; 137
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	60 81       	ld	r22, Z
    29de:	71 81       	ldd	r23, Z+1	; 0x01
    29e0:	82 81       	ldd	r24, Z+2	; 0x02
    29e2:	93 81       	ldd	r25, Z+3	; 0x03
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	3f ef       	ldi	r19, 0xFF	; 255
    29e8:	4f e7       	ldi	r20, 0x7F	; 127
    29ea:	57 e4       	ldi	r21, 0x47	; 71
    29ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f0:	18 16       	cp	r1, r24
    29f2:	0c f0       	brlt	.+2      	; 0x29f6 <main+0x6a2>
    29f4:	43 c0       	rjmp	.+134    	; 0x2a7c <main+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f6:	fe 01       	movw	r30, r28
    29f8:	e5 58       	subi	r30, 0x85	; 133
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	60 81       	ld	r22, Z
    29fe:	71 81       	ldd	r23, Z+1	; 0x01
    2a00:	82 81       	ldd	r24, Z+2	; 0x02
    2a02:	93 81       	ldd	r25, Z+3	; 0x03
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e2       	ldi	r20, 0x20	; 32
    2a0a:	51 e4       	ldi	r21, 0x41	; 65
    2a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	8e 01       	movw	r16, r28
    2a16:	0b 58       	subi	r16, 0x8B	; 139
    2a18:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1a:	bc 01       	movw	r22, r24
    2a1c:	cd 01       	movw	r24, r26
    2a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	f8 01       	movw	r30, r16
    2a28:	91 83       	std	Z+1, r25	; 0x01
    2a2a:	80 83       	st	Z, r24
    2a2c:	1f c0       	rjmp	.+62     	; 0x2a6c <main+0x718>
    2a2e:	fe 01       	movw	r30, r28
    2a30:	ed 58       	subi	r30, 0x8D	; 141
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	88 ec       	ldi	r24, 0xC8	; 200
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	91 83       	std	Z+1, r25	; 0x01
    2a3a:	80 83       	st	Z, r24
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	ed 58       	subi	r30, 0x8D	; 141
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	91 81       	ldd	r25, Z+1	; 0x01
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <main+0x6f2>
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	ed 58       	subi	r30, 0x8D	; 141
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	91 83       	std	Z+1, r25	; 0x01
    2a52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a54:	de 01       	movw	r26, r28
    2a56:	ab 58       	subi	r26, 0x8B	; 139
    2a58:	bf 4f       	sbci	r27, 0xFF	; 255
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	eb 58       	subi	r30, 0x8B	; 139
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	80 81       	ld	r24, Z
    2a62:	91 81       	ldd	r25, Z+1	; 0x01
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	11 96       	adiw	r26, 0x01	; 1
    2a68:	9c 93       	st	X, r25
    2a6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	eb 58       	subi	r30, 0x8B	; 139
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	80 81       	ld	r24, Z
    2a74:	91 81       	ldd	r25, Z+1	; 0x01
    2a76:	00 97       	sbiw	r24, 0x00	; 0
    2a78:	d1 f6       	brne	.-76     	; 0x2a2e <main+0x6da>
    2a7a:	61 c1       	rjmp	.+706    	; 0x2d3e <main+0x9ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7c:	8e 01       	movw	r16, r28
    2a7e:	0b 58       	subi	r16, 0x8B	; 139
    2a80:	1f 4f       	sbci	r17, 0xFF	; 255
    2a82:	fe 01       	movw	r30, r28
    2a84:	e9 58       	subi	r30, 0x89	; 137
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	60 81       	ld	r22, Z
    2a8a:	71 81       	ldd	r23, Z+1	; 0x01
    2a8c:	82 81       	ldd	r24, Z+2	; 0x02
    2a8e:	93 81       	ldd	r25, Z+3	; 0x03
    2a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	f8 01       	movw	r30, r16
    2a9a:	91 83       	std	Z+1, r25	; 0x01
    2a9c:	80 83       	st	Z, r24
    2a9e:	de 01       	movw	r26, r28
    2aa0:	af 58       	subi	r26, 0x8F	; 143
    2aa2:	bf 4f       	sbci	r27, 0xFF	; 255
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	eb 58       	subi	r30, 0x8B	; 139
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	80 81       	ld	r24, Z
    2aac:	91 81       	ldd	r25, Z+1	; 0x01
    2aae:	11 96       	adiw	r26, 0x01	; 1
    2ab0:	9c 93       	st	X, r25
    2ab2:	8e 93       	st	-X, r24
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	ef 58       	subi	r30, 0x8F	; 143
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	80 81       	ld	r24, Z
    2abc:	91 81       	ldd	r25, Z+1	; 0x01
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	f1 f7       	brne	.-4      	; 0x2abe <main+0x76a>
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	ef 58       	subi	r30, 0x8F	; 143
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	91 83       	std	Z+1, r25	; 0x01
    2aca:	80 83       	st	Z, r24
    2acc:	38 c1       	rjmp	.+624    	; 0x2d3e <main+0x9ea>
			case '+':
				_delay_ms(200); // Wait for 200 milliseconds (debouncing)
				while (tries <= 2 && !is_password_correct_f) {
					is_password_correct_f = 0; // Reset flag for correct password entry
    2ace:	fe 01       	movw	r30, r28
    2ad0:	e6 55       	subi	r30, 0x56	; 86
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	10 82       	st	Z, r1
					LCD_clearScreen(); // Clear the LCD screen
    2ad6:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "plz enter pass: "); // Prompt for password entry
    2ada:	23 ea       	ldi	r18, 0xA3	; 163
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	60 e0       	ldi	r22, 0x00	; 0
    2ae2:	a9 01       	movw	r20, r18
    2ae4:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>
					LCD_moveCursor(1, 0); // Move cursor to the next line
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	60 e0       	ldi	r22, 0x00	; 0
    2aec:	0e 94 22 11 	call	0x2244	; 0x2244 <LCD_moveCursor>
					UART_sendByte(GET_READY_FOR_PASSWORD); // Send request for password entry
    2af0:	82 e5       	ldi	r24, 0x52	; 82
    2af2:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <UART_sendByte>
					getPassword(); // Get password from user
    2af6:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <getPassword>
					sendPassword(password_buffer); // Send password through UART
    2afa:	8b e3       	ldi	r24, 0x3B	; 59
    2afc:	91 e0       	ldi	r25, 0x01	; 1
    2afe:	0e 94 55 1b 	call	0x36aa	; 0x36aa <sendPassword>
    2b02:	fe 01       	movw	r30, r28
    2b04:	e3 59       	subi	r30, 0x93	; 147
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	a0 e7       	ldi	r26, 0x70	; 112
    2b0e:	b1 e4       	ldi	r27, 0x41	; 65
    2b10:	80 83       	st	Z, r24
    2b12:	91 83       	std	Z+1, r25	; 0x01
    2b14:	a2 83       	std	Z+2, r26	; 0x02
    2b16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b18:	8e 01       	movw	r16, r28
    2b1a:	07 59       	subi	r16, 0x97	; 151
    2b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b1e:	fe 01       	movw	r30, r28
    2b20:	e3 59       	subi	r30, 0x93	; 147
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	60 81       	ld	r22, Z
    2b26:	71 81       	ldd	r23, Z+1	; 0x01
    2b28:	82 81       	ldd	r24, Z+2	; 0x02
    2b2a:	93 81       	ldd	r25, Z+3	; 0x03
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	4a ef       	ldi	r20, 0xFA	; 250
    2b32:	54 e4       	ldi	r21, 0x44	; 68
    2b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	f8 01       	movw	r30, r16
    2b3e:	80 83       	st	Z, r24
    2b40:	91 83       	std	Z+1, r25	; 0x01
    2b42:	a2 83       	std	Z+2, r26	; 0x02
    2b44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b46:	fe 01       	movw	r30, r28
    2b48:	e7 59       	subi	r30, 0x97	; 151
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	60 81       	ld	r22, Z
    2b4e:	71 81       	ldd	r23, Z+1	; 0x01
    2b50:	82 81       	ldd	r24, Z+2	; 0x02
    2b52:	93 81       	ldd	r25, Z+3	; 0x03
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e8       	ldi	r20, 0x80	; 128
    2b5a:	5f e3       	ldi	r21, 0x3F	; 63
    2b5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b60:	88 23       	and	r24, r24
    2b62:	44 f4       	brge	.+16     	; 0x2b74 <main+0x820>
		__ticks = 1;
    2b64:	fe 01       	movw	r30, r28
    2b66:	e9 59       	subi	r30, 0x99	; 153
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	80 83       	st	Z, r24
    2b72:	64 c0       	rjmp	.+200    	; 0x2c3c <main+0x8e8>
	else if (__tmp > 65535)
    2b74:	fe 01       	movw	r30, r28
    2b76:	e7 59       	subi	r30, 0x97	; 151
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	60 81       	ld	r22, Z
    2b7c:	71 81       	ldd	r23, Z+1	; 0x01
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	93 81       	ldd	r25, Z+3	; 0x03
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	3f ef       	ldi	r19, 0xFF	; 255
    2b86:	4f e7       	ldi	r20, 0x7F	; 127
    2b88:	57 e4       	ldi	r21, 0x47	; 71
    2b8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b8e:	18 16       	cp	r1, r24
    2b90:	0c f0       	brlt	.+2      	; 0x2b94 <main+0x840>
    2b92:	43 c0       	rjmp	.+134    	; 0x2c1a <main+0x8c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b94:	fe 01       	movw	r30, r28
    2b96:	e3 59       	subi	r30, 0x93	; 147
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	60 81       	ld	r22, Z
    2b9c:	71 81       	ldd	r23, Z+1	; 0x01
    2b9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ba0:	93 81       	ldd	r25, Z+3	; 0x03
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 e2       	ldi	r20, 0x20	; 32
    2ba8:	51 e4       	ldi	r21, 0x41	; 65
    2baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	8e 01       	movw	r16, r28
    2bb4:	09 59       	subi	r16, 0x99	; 153
    2bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb8:	bc 01       	movw	r22, r24
    2bba:	cd 01       	movw	r24, r26
    2bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	f8 01       	movw	r30, r16
    2bc6:	91 83       	std	Z+1, r25	; 0x01
    2bc8:	80 83       	st	Z, r24
    2bca:	1f c0       	rjmp	.+62     	; 0x2c0a <main+0x8b6>
    2bcc:	fe 01       	movw	r30, r28
    2bce:	eb 59       	subi	r30, 0x9B	; 155
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	88 ec       	ldi	r24, 0xC8	; 200
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	91 83       	std	Z+1, r25	; 0x01
    2bd8:	80 83       	st	Z, r24
    2bda:	fe 01       	movw	r30, r28
    2bdc:	eb 59       	subi	r30, 0x9B	; 155
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	80 81       	ld	r24, Z
    2be2:	91 81       	ldd	r25, Z+1	; 0x01
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <main+0x890>
    2be8:	fe 01       	movw	r30, r28
    2bea:	eb 59       	subi	r30, 0x9B	; 155
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	91 83       	std	Z+1, r25	; 0x01
    2bf0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf2:	de 01       	movw	r26, r28
    2bf4:	a9 59       	subi	r26, 0x99	; 153
    2bf6:	bf 4f       	sbci	r27, 0xFF	; 255
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	e9 59       	subi	r30, 0x99	; 153
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	80 81       	ld	r24, Z
    2c00:	91 81       	ldd	r25, Z+1	; 0x01
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	11 96       	adiw	r26, 0x01	; 1
    2c06:	9c 93       	st	X, r25
    2c08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	e9 59       	subi	r30, 0x99	; 153
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	80 81       	ld	r24, Z
    2c12:	91 81       	ldd	r25, Z+1	; 0x01
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	d1 f6       	brne	.-76     	; 0x2bcc <main+0x878>
    2c18:	27 c0       	rjmp	.+78     	; 0x2c68 <main+0x914>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c1a:	8e 01       	movw	r16, r28
    2c1c:	09 59       	subi	r16, 0x99	; 153
    2c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c20:	fe 01       	movw	r30, r28
    2c22:	e7 59       	subi	r30, 0x97	; 151
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	60 81       	ld	r22, Z
    2c28:	71 81       	ldd	r23, Z+1	; 0x01
    2c2a:	82 81       	ldd	r24, Z+2	; 0x02
    2c2c:	93 81       	ldd	r25, Z+3	; 0x03
    2c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	f8 01       	movw	r30, r16
    2c38:	91 83       	std	Z+1, r25	; 0x01
    2c3a:	80 83       	st	Z, r24
    2c3c:	de 01       	movw	r26, r28
    2c3e:	ad 59       	subi	r26, 0x9D	; 157
    2c40:	bf 4f       	sbci	r27, 0xFF	; 255
    2c42:	fe 01       	movw	r30, r28
    2c44:	e9 59       	subi	r30, 0x99	; 153
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	80 81       	ld	r24, Z
    2c4a:	91 81       	ldd	r25, Z+1	; 0x01
    2c4c:	8d 93       	st	X+, r24
    2c4e:	9c 93       	st	X, r25
    2c50:	fe 01       	movw	r30, r28
    2c52:	ed 59       	subi	r30, 0x9D	; 157
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	80 81       	ld	r24, Z
    2c58:	91 81       	ldd	r25, Z+1	; 0x01
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <main+0x906>
    2c5e:	fe 01       	movw	r30, r28
    2c60:	ed 59       	subi	r30, 0x9D	; 157
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	91 83       	std	Z+1, r25	; 0x01
    2c66:	80 83       	st	Z, r24
					_delay_ms(15); // Delay for 15 milliseconds after sending each character

					if (UART_recieveByte() == CORRECT_PASSWORD) { // Check if received password is correct
    2c68:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <UART_recieveByte>
    2c6c:	84 35       	cpi	r24, 0x54	; 84
    2c6e:	09 f0       	breq	.+2      	; 0x2c72 <main+0x91e>
    2c70:	5d c0       	rjmp	.+186    	; 0x2d2c <main+0x9d8>
						is_password_correct_f = 1; // Set flag indicating correct password
    2c72:	fe 01       	movw	r30, r28
    2c74:	e6 55       	subi	r30, 0x56	; 86
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	80 83       	st	Z, r24
						UART_sendByte(OPEN_DOOR); // Send command to open the door
    2c7c:	85 e5       	ldi	r24, 0x55	; 85
    2c7e:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <UART_sendByte>
						Timer1_init(&Timer1_config); // Initialize Timer1 for timing operations
    2c82:	8b e2       	ldi	r24, 0x2B	; 43
    2c84:	91 e0       	ldi	r25, 0x01	; 1
    2c86:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <Timer1_init>

						// Display messages to indicate door unlocking process
						LCD_clearScreen();
    2c8a:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 6, "DOOR");
    2c8e:	24 eb       	ldi	r18, 0xB4	; 180
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	66 e0       	ldi	r22, 0x06	; 6
    2c96:	a9 01       	movw	r20, r18
    2c98:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 2, "IS UNLOCKING");
    2c9c:	29 eb       	ldi	r18, 0xB9	; 185
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	62 e0       	ldi	r22, 0x02	; 2
    2ca4:	a9 01       	movw	r20, r18
    2ca6:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>

						// Wait for Timer1 ticks to reach 15 (15 seconds)
						while (timer1_ticks != 15)
    2caa:	80 91 3a 01 	lds	r24, 0x013A
    2cae:	8f 30       	cpi	r24, 0x0F	; 15
    2cb0:	e1 f7       	brne	.-8      	; 0x2caa <main+0x956>
							;
						timer1_ticks = 0; // Reset Timer1 ticks
    2cb2:	10 92 3a 01 	sts	0x013A, r1
						Timer1_deinit(); // Deinitialize Timer1
    2cb6:	0e 94 4e 09 	call	0x129c	; 0x129c <Timer1_deinit>

						// Reinitialize Timer1 for holding duration
						Timer1_init(&Timer1_config);
    2cba:	8b e2       	ldi	r24, 0x2B	; 43
    2cbc:	91 e0       	ldi	r25, 0x01	; 1
    2cbe:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <Timer1_init>
						LCD_clearScreen();
    2cc2:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 6, "DOOR");
    2cc6:	24 eb       	ldi	r18, 0xB4	; 180
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	66 e0       	ldi	r22, 0x06	; 6
    2cce:	a9 01       	movw	r20, r18
    2cd0:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 3, "IS HOLDING");
    2cd4:	26 ec       	ldi	r18, 0xC6	; 198
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	63 e0       	ldi	r22, 0x03	; 3
    2cdc:	a9 01       	movw	r20, r18
    2cde:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>

						// Wait for Timer1 ticks to reach 3 (3 seconds)
						while (timer1_ticks != 3)
    2ce2:	80 91 3a 01 	lds	r24, 0x013A
    2ce6:	83 30       	cpi	r24, 0x03	; 3
    2ce8:	e1 f7       	brne	.-8      	; 0x2ce2 <main+0x98e>
							;
						timer1_ticks = 0; // Reset Timer1 ticks
    2cea:	10 92 3a 01 	sts	0x013A, r1
						Timer1_deinit(); // Deinitialize Timer1
    2cee:	0e 94 4e 09 	call	0x129c	; 0x129c <Timer1_deinit>

						// Reinitialize Timer1 for locking process
						Timer1_init(&Timer1_config);
    2cf2:	8b e2       	ldi	r24, 0x2B	; 43
    2cf4:	91 e0       	ldi	r25, 0x01	; 1
    2cf6:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <Timer1_init>
						LCD_clearScreen();
    2cfa:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 6, "DOOR");
    2cfe:	24 eb       	ldi	r18, 0xB4	; 180
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	66 e0       	ldi	r22, 0x06	; 6
    2d06:	a9 01       	movw	r20, r18
    2d08:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 3, "IS LOCKING");
    2d0c:	21 ed       	ldi	r18, 0xD1	; 209
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	63 e0       	ldi	r22, 0x03	; 3
    2d14:	a9 01       	movw	r20, r18
    2d16:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>

						// Wait for Timer1 ticks to reach 15 (15 seconds)
						while (timer1_ticks != 15)
    2d1a:	80 91 3a 01 	lds	r24, 0x013A
    2d1e:	8f 30       	cpi	r24, 0x0F	; 15
    2d20:	e1 f7       	brne	.-8      	; 0x2d1a <main+0x9c6>
							;
						timer1_ticks = 0; // Reset Timer1 ticks
    2d22:	10 92 3a 01 	sts	0x013A, r1
						Timer1_deinit(); // Deinitialize Timer1
    2d26:	0e 94 4e 09 	call	0x129c	; 0x129c <Timer1_deinit>
    2d2a:	09 c0       	rjmp	.+18     	; 0x2d3e <main+0x9ea>
					} else {
						tries++; // Increment the number of password entry attempts
    2d2c:	de 01       	movw	r26, r28
    2d2e:	a3 55       	subi	r26, 0x53	; 83
    2d30:	bf 4f       	sbci	r27, 0xFF	; 255
    2d32:	fe 01       	movw	r30, r28
    2d34:	e3 55       	subi	r30, 0x53	; 83
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	80 81       	ld	r24, Z
    2d3a:	8f 5f       	subi	r24, 0xFF	; 255
    2d3c:	8c 93       	st	X, r24
			_delay_ms(100); // Delay for 100 milliseconds (debouncing)

			switch (key) {
			case '+':
				_delay_ms(200); // Wait for 200 milliseconds (debouncing)
				while (tries <= 2 && !is_password_correct_f) {
    2d3e:	fe 01       	movw	r30, r28
    2d40:	e3 55       	subi	r30, 0x53	; 83
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	80 81       	ld	r24, Z
    2d46:	83 30       	cpi	r24, 0x03	; 3
    2d48:	38 f4       	brcc	.+14     	; 0x2d58 <main+0xa04>
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	e6 55       	subi	r30, 0x56	; 86
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	80 81       	ld	r24, Z
    2d52:	88 23       	and	r24, r24
    2d54:	09 f4       	brne	.+2      	; 0x2d58 <main+0xa04>
    2d56:	bb ce       	rjmp	.-650    	; 0x2ace <main+0x77a>
						Timer1_deinit(); // Deinitialize Timer1
					} else {
						tries++; // Increment the number of password entry attempts
					}
				}
				if (is_password_correct_f == 0) { // Check if password was incorrect
    2d58:	fe 01       	movw	r30, r28
    2d5a:	e6 55       	subi	r30, 0x56	; 86
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	80 81       	ld	r24, Z
    2d60:	88 23       	and	r24, r24
    2d62:	09 f0       	breq	.+2      	; 0x2d66 <main+0xa12>
    2d64:	8a c1       	rjmp	.+788    	; 0x307a <main+0xd26>
					UART_sendByte(ERROR_ACTION); // Send error action command
    2d66:	89 e4       	ldi	r24, 0x49	; 73
    2d68:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <UART_sendByte>
					LCD_clearScreen(); // Clear the LCD screen
    2d6c:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_clearScreen>
					Timer1_init(&Timer1_config); // Initialize Timer1 for timing operations
    2d70:	8b e2       	ldi	r24, 0x2B	; 43
    2d72:	91 e0       	ldi	r25, 0x01	; 1
    2d74:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <Timer1_init>
    2d78:	77 c1       	rjmp	.+750    	; 0x3068 <main+0xd14>

					// Display unauthorized access message for 60 seconds
					while (timer1_ticks != 60) {
						LCD_displayStringRowColumn(0, 2, "UNAUTHORIZED");
    2d7a:	2c ed       	ldi	r18, 0xDC	; 220
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	62 e0       	ldi	r22, 0x02	; 2
    2d82:	a9 01       	movw	r20, r18
    2d84:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 5, "ACCESS");
    2d88:	29 ee       	ldi	r18, 0xE9	; 233
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	65 e0       	ldi	r22, 0x05	; 5
    2d90:	a9 01       	movw	r20, r18
    2d92:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>
    2d96:	fe 01       	movw	r30, r28
    2d98:	e1 5a       	subi	r30, 0xA1	; 161
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	aa ef       	ldi	r26, 0xFA	; 250
    2da2:	b3 e4       	ldi	r27, 0x43	; 67
    2da4:	80 83       	st	Z, r24
    2da6:	91 83       	std	Z+1, r25	; 0x01
    2da8:	a2 83       	std	Z+2, r26	; 0x02
    2daa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dac:	8e 01       	movw	r16, r28
    2dae:	05 5a       	subi	r16, 0xA5	; 165
    2db0:	1f 4f       	sbci	r17, 0xFF	; 255
    2db2:	fe 01       	movw	r30, r28
    2db4:	e1 5a       	subi	r30, 0xA1	; 161
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	60 81       	ld	r22, Z
    2dba:	71 81       	ldd	r23, Z+1	; 0x01
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	93 81       	ldd	r25, Z+3	; 0x03
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	4a ef       	ldi	r20, 0xFA	; 250
    2dc6:	54 e4       	ldi	r21, 0x44	; 68
    2dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	f8 01       	movw	r30, r16
    2dd2:	80 83       	st	Z, r24
    2dd4:	91 83       	std	Z+1, r25	; 0x01
    2dd6:	a2 83       	std	Z+2, r26	; 0x02
    2dd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e5 5a       	subi	r30, 0xA5	; 165
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	60 81       	ld	r22, Z
    2de2:	71 81       	ldd	r23, Z+1	; 0x01
    2de4:	82 81       	ldd	r24, Z+2	; 0x02
    2de6:	93 81       	ldd	r25, Z+3	; 0x03
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e8       	ldi	r20, 0x80	; 128
    2dee:	5f e3       	ldi	r21, 0x3F	; 63
    2df0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2df4:	88 23       	and	r24, r24
    2df6:	44 f4       	brge	.+16     	; 0x2e08 <main+0xab4>
		__ticks = 1;
    2df8:	fe 01       	movw	r30, r28
    2dfa:	e7 5a       	subi	r30, 0xA7	; 167
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	91 83       	std	Z+1, r25	; 0x01
    2e04:	80 83       	st	Z, r24
    2e06:	64 c0       	rjmp	.+200    	; 0x2ed0 <main+0xb7c>
	else if (__tmp > 65535)
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e5 5a       	subi	r30, 0xA5	; 165
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	60 81       	ld	r22, Z
    2e10:	71 81       	ldd	r23, Z+1	; 0x01
    2e12:	82 81       	ldd	r24, Z+2	; 0x02
    2e14:	93 81       	ldd	r25, Z+3	; 0x03
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	3f ef       	ldi	r19, 0xFF	; 255
    2e1a:	4f e7       	ldi	r20, 0x7F	; 127
    2e1c:	57 e4       	ldi	r21, 0x47	; 71
    2e1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e22:	18 16       	cp	r1, r24
    2e24:	0c f0       	brlt	.+2      	; 0x2e28 <main+0xad4>
    2e26:	43 c0       	rjmp	.+134    	; 0x2eae <main+0xb5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e28:	fe 01       	movw	r30, r28
    2e2a:	e1 5a       	subi	r30, 0xA1	; 161
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	60 81       	ld	r22, Z
    2e30:	71 81       	ldd	r23, Z+1	; 0x01
    2e32:	82 81       	ldd	r24, Z+2	; 0x02
    2e34:	93 81       	ldd	r25, Z+3	; 0x03
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e2       	ldi	r20, 0x20	; 32
    2e3c:	51 e4       	ldi	r21, 0x41	; 65
    2e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	8e 01       	movw	r16, r28
    2e48:	07 5a       	subi	r16, 0xA7	; 167
    2e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4c:	bc 01       	movw	r22, r24
    2e4e:	cd 01       	movw	r24, r26
    2e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	f8 01       	movw	r30, r16
    2e5a:	91 83       	std	Z+1, r25	; 0x01
    2e5c:	80 83       	st	Z, r24
    2e5e:	1f c0       	rjmp	.+62     	; 0x2e9e <main+0xb4a>
    2e60:	fe 01       	movw	r30, r28
    2e62:	e9 5a       	subi	r30, 0xA9	; 169
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	88 ec       	ldi	r24, 0xC8	; 200
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	91 83       	std	Z+1, r25	; 0x01
    2e6c:	80 83       	st	Z, r24
    2e6e:	fe 01       	movw	r30, r28
    2e70:	e9 5a       	subi	r30, 0xA9	; 169
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	80 81       	ld	r24, Z
    2e76:	91 81       	ldd	r25, Z+1	; 0x01
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <main+0xb24>
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	e9 5a       	subi	r30, 0xA9	; 169
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	91 83       	std	Z+1, r25	; 0x01
    2e84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e86:	de 01       	movw	r26, r28
    2e88:	a7 5a       	subi	r26, 0xA7	; 167
    2e8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	e7 5a       	subi	r30, 0xA7	; 167
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	80 81       	ld	r24, Z
    2e94:	91 81       	ldd	r25, Z+1	; 0x01
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	11 96       	adiw	r26, 0x01	; 1
    2e9a:	9c 93       	st	X, r25
    2e9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	e7 5a       	subi	r30, 0xA7	; 167
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	80 81       	ld	r24, Z
    2ea6:	91 81       	ldd	r25, Z+1	; 0x01
    2ea8:	00 97       	sbiw	r24, 0x00	; 0
    2eaa:	d1 f6       	brne	.-76     	; 0x2e60 <main+0xb0c>
    2eac:	27 c0       	rjmp	.+78     	; 0x2efc <main+0xba8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eae:	8e 01       	movw	r16, r28
    2eb0:	07 5a       	subi	r16, 0xA7	; 167
    2eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e5 5a       	subi	r30, 0xA5	; 165
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	60 81       	ld	r22, Z
    2ebc:	71 81       	ldd	r23, Z+1	; 0x01
    2ebe:	82 81       	ldd	r24, Z+2	; 0x02
    2ec0:	93 81       	ldd	r25, Z+3	; 0x03
    2ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	f8 01       	movw	r30, r16
    2ecc:	91 83       	std	Z+1, r25	; 0x01
    2ece:	80 83       	st	Z, r24
    2ed0:	de 01       	movw	r26, r28
    2ed2:	ab 5a       	subi	r26, 0xAB	; 171
    2ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	e7 5a       	subi	r30, 0xA7	; 167
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	80 81       	ld	r24, Z
    2ede:	91 81       	ldd	r25, Z+1	; 0x01
    2ee0:	8d 93       	st	X+, r24
    2ee2:	9c 93       	st	X, r25
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	eb 5a       	subi	r30, 0xAB	; 171
    2ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eea:	80 81       	ld	r24, Z
    2eec:	91 81       	ldd	r25, Z+1	; 0x01
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	f1 f7       	brne	.-4      	; 0x2eee <main+0xb9a>
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	eb 5a       	subi	r30, 0xAB	; 171
    2ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef8:	91 83       	std	Z+1, r25	; 0x01
    2efa:	80 83       	st	Z, r24
						_delay_ms(500);
						LCD_clearScreen();
    2efc:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_clearScreen>
    2f00:	fe 01       	movw	r30, r28
    2f02:	ef 5a       	subi	r30, 0xAF	; 175
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	aa ef       	ldi	r26, 0xFA	; 250
    2f0c:	b3 e4       	ldi	r27, 0x43	; 67
    2f0e:	80 83       	st	Z, r24
    2f10:	91 83       	std	Z+1, r25	; 0x01
    2f12:	a2 83       	std	Z+2, r26	; 0x02
    2f14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f16:	8e 01       	movw	r16, r28
    2f18:	03 5b       	subi	r16, 0xB3	; 179
    2f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	ef 5a       	subi	r30, 0xAF	; 175
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	60 81       	ld	r22, Z
    2f24:	71 81       	ldd	r23, Z+1	; 0x01
    2f26:	82 81       	ldd	r24, Z+2	; 0x02
    2f28:	93 81       	ldd	r25, Z+3	; 0x03
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	4a ef       	ldi	r20, 0xFA	; 250
    2f30:	54 e4       	ldi	r21, 0x44	; 68
    2f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	f8 01       	movw	r30, r16
    2f3c:	80 83       	st	Z, r24
    2f3e:	91 83       	std	Z+1, r25	; 0x01
    2f40:	a2 83       	std	Z+2, r26	; 0x02
    2f42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f44:	fe 01       	movw	r30, r28
    2f46:	e3 5b       	subi	r30, 0xB3	; 179
    2f48:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4a:	60 81       	ld	r22, Z
    2f4c:	71 81       	ldd	r23, Z+1	; 0x01
    2f4e:	82 81       	ldd	r24, Z+2	; 0x02
    2f50:	93 81       	ldd	r25, Z+3	; 0x03
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	40 e8       	ldi	r20, 0x80	; 128
    2f58:	5f e3       	ldi	r21, 0x3F	; 63
    2f5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f5e:	88 23       	and	r24, r24
    2f60:	44 f4       	brge	.+16     	; 0x2f72 <main+0xc1e>
		__ticks = 1;
    2f62:	fe 01       	movw	r30, r28
    2f64:	e5 5b       	subi	r30, 0xB5	; 181
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	91 83       	std	Z+1, r25	; 0x01
    2f6e:	80 83       	st	Z, r24
    2f70:	64 c0       	rjmp	.+200    	; 0x303a <main+0xce6>
	else if (__tmp > 65535)
    2f72:	fe 01       	movw	r30, r28
    2f74:	e3 5b       	subi	r30, 0xB3	; 179
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	60 81       	ld	r22, Z
    2f7a:	71 81       	ldd	r23, Z+1	; 0x01
    2f7c:	82 81       	ldd	r24, Z+2	; 0x02
    2f7e:	93 81       	ldd	r25, Z+3	; 0x03
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	3f ef       	ldi	r19, 0xFF	; 255
    2f84:	4f e7       	ldi	r20, 0x7F	; 127
    2f86:	57 e4       	ldi	r21, 0x47	; 71
    2f88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f8c:	18 16       	cp	r1, r24
    2f8e:	0c f0       	brlt	.+2      	; 0x2f92 <main+0xc3e>
    2f90:	43 c0       	rjmp	.+134    	; 0x3018 <main+0xcc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f92:	fe 01       	movw	r30, r28
    2f94:	ef 5a       	subi	r30, 0xAF	; 175
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	60 81       	ld	r22, Z
    2f9a:	71 81       	ldd	r23, Z+1	; 0x01
    2f9c:	82 81       	ldd	r24, Z+2	; 0x02
    2f9e:	93 81       	ldd	r25, Z+3	; 0x03
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e2       	ldi	r20, 0x20	; 32
    2fa6:	51 e4       	ldi	r21, 0x41	; 65
    2fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	8e 01       	movw	r16, r28
    2fb2:	05 5b       	subi	r16, 0xB5	; 181
    2fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	cd 01       	movw	r24, r26
    2fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	f8 01       	movw	r30, r16
    2fc4:	91 83       	std	Z+1, r25	; 0x01
    2fc6:	80 83       	st	Z, r24
    2fc8:	1f c0       	rjmp	.+62     	; 0x3008 <main+0xcb4>
    2fca:	fe 01       	movw	r30, r28
    2fcc:	e7 5b       	subi	r30, 0xB7	; 183
    2fce:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd0:	88 ec       	ldi	r24, 0xC8	; 200
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	91 83       	std	Z+1, r25	; 0x01
    2fd6:	80 83       	st	Z, r24
    2fd8:	fe 01       	movw	r30, r28
    2fda:	e7 5b       	subi	r30, 0xB7	; 183
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	80 81       	ld	r24, Z
    2fe0:	91 81       	ldd	r25, Z+1	; 0x01
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	f1 f7       	brne	.-4      	; 0x2fe2 <main+0xc8e>
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	e7 5b       	subi	r30, 0xB7	; 183
    2fea:	ff 4f       	sbci	r31, 0xFF	; 255
    2fec:	91 83       	std	Z+1, r25	; 0x01
    2fee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff0:	de 01       	movw	r26, r28
    2ff2:	a5 5b       	subi	r26, 0xB5	; 181
    2ff4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	e5 5b       	subi	r30, 0xB5	; 181
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	80 81       	ld	r24, Z
    2ffe:	91 81       	ldd	r25, Z+1	; 0x01
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	11 96       	adiw	r26, 0x01	; 1
    3004:	9c 93       	st	X, r25
    3006:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3008:	fe 01       	movw	r30, r28
    300a:	e5 5b       	subi	r30, 0xB5	; 181
    300c:	ff 4f       	sbci	r31, 0xFF	; 255
    300e:	80 81       	ld	r24, Z
    3010:	91 81       	ldd	r25, Z+1	; 0x01
    3012:	00 97       	sbiw	r24, 0x00	; 0
    3014:	d1 f6       	brne	.-76     	; 0x2fca <main+0xc76>
    3016:	28 c0       	rjmp	.+80     	; 0x3068 <main+0xd14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3018:	8e 01       	movw	r16, r28
    301a:	05 5b       	subi	r16, 0xB5	; 181
    301c:	1f 4f       	sbci	r17, 0xFF	; 255
    301e:	fe 01       	movw	r30, r28
    3020:	e3 5b       	subi	r30, 0xB3	; 179
    3022:	ff 4f       	sbci	r31, 0xFF	; 255
    3024:	60 81       	ld	r22, Z
    3026:	71 81       	ldd	r23, Z+1	; 0x01
    3028:	82 81       	ldd	r24, Z+2	; 0x02
    302a:	93 81       	ldd	r25, Z+3	; 0x03
    302c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	f8 01       	movw	r30, r16
    3036:	91 83       	std	Z+1, r25	; 0x01
    3038:	80 83       	st	Z, r24
    303a:	de 01       	movw	r26, r28
    303c:	a9 5b       	subi	r26, 0xB9	; 185
    303e:	bf 4f       	sbci	r27, 0xFF	; 255
    3040:	fe 01       	movw	r30, r28
    3042:	e5 5b       	subi	r30, 0xB5	; 181
    3044:	ff 4f       	sbci	r31, 0xFF	; 255
    3046:	80 81       	ld	r24, Z
    3048:	91 81       	ldd	r25, Z+1	; 0x01
    304a:	11 96       	adiw	r26, 0x01	; 1
    304c:	9c 93       	st	X, r25
    304e:	8e 93       	st	-X, r24
    3050:	fe 01       	movw	r30, r28
    3052:	e9 5b       	subi	r30, 0xB9	; 185
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	80 81       	ld	r24, Z
    3058:	91 81       	ldd	r25, Z+1	; 0x01
    305a:	01 97       	sbiw	r24, 0x01	; 1
    305c:	f1 f7       	brne	.-4      	; 0x305a <main+0xd06>
    305e:	fe 01       	movw	r30, r28
    3060:	e9 5b       	subi	r30, 0xB9	; 185
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	91 83       	std	Z+1, r25	; 0x01
    3066:	80 83       	st	Z, r24
					UART_sendByte(ERROR_ACTION); // Send error action command
					LCD_clearScreen(); // Clear the LCD screen
					Timer1_init(&Timer1_config); // Initialize Timer1 for timing operations

					// Display unauthorized access message for 60 seconds
					while (timer1_ticks != 60) {
    3068:	80 91 3a 01 	lds	r24, 0x013A
    306c:	8c 33       	cpi	r24, 0x3C	; 60
    306e:	09 f0       	breq	.+2      	; 0x3072 <main+0xd1e>
    3070:	84 ce       	rjmp	.-760    	; 0x2d7a <main+0xa26>
						_delay_ms(500);
						LCD_clearScreen();
						_delay_ms(500);
					}

					timer1_ticks = 0; // Reset Timer1 ticks
    3072:	10 92 3a 01 	sts	0x013A, r1
					Timer1_deinit(); // Deinitialize Timer1
    3076:	0e 94 4e 09 	call	0x129c	; 0x129c <Timer1_deinit>
				}

				is_password_correct_f = 0; // Reset flag for correct password entry
    307a:	fe 01       	movw	r30, r28
    307c:	e6 55       	subi	r30, 0x56	; 86
    307e:	ff 4f       	sbci	r31, 0xFF	; 255
    3080:	10 82       	st	Z, r1
    3082:	7b cb       	rjmp	.-2314   	; 0x277a <main+0x426>
				break; // Exit the switch statement
    3084:	fe 01       	movw	r30, r28
    3086:	ed 5b       	subi	r30, 0xBD	; 189
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	a8 e4       	ldi	r26, 0x48	; 72
    3090:	b3 e4       	ldi	r27, 0x43	; 67
    3092:	80 83       	st	Z, r24
    3094:	91 83       	std	Z+1, r25	; 0x01
    3096:	a2 83       	std	Z+2, r26	; 0x02
    3098:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    309a:	8e 01       	movw	r16, r28
    309c:	01 5c       	subi	r16, 0xC1	; 193
    309e:	1f 4f       	sbci	r17, 0xFF	; 255
    30a0:	fe 01       	movw	r30, r28
    30a2:	ed 5b       	subi	r30, 0xBD	; 189
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	60 81       	ld	r22, Z
    30a8:	71 81       	ldd	r23, Z+1	; 0x01
    30aa:	82 81       	ldd	r24, Z+2	; 0x02
    30ac:	93 81       	ldd	r25, Z+3	; 0x03
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	4a ef       	ldi	r20, 0xFA	; 250
    30b4:	54 e4       	ldi	r21, 0x44	; 68
    30b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	f8 01       	movw	r30, r16
    30c0:	80 83       	st	Z, r24
    30c2:	91 83       	std	Z+1, r25	; 0x01
    30c4:	a2 83       	std	Z+2, r26	; 0x02
    30c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30c8:	fe 01       	movw	r30, r28
    30ca:	ff 96       	adiw	r30, 0x3f	; 63
    30cc:	60 81       	ld	r22, Z
    30ce:	71 81       	ldd	r23, Z+1	; 0x01
    30d0:	82 81       	ldd	r24, Z+2	; 0x02
    30d2:	93 81       	ldd	r25, Z+3	; 0x03
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	40 e8       	ldi	r20, 0x80	; 128
    30da:	5f e3       	ldi	r21, 0x3F	; 63
    30dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30e0:	88 23       	and	r24, r24
    30e2:	2c f4       	brge	.+10     	; 0x30ee <main+0xd9a>
		__ticks = 1;
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	9e af       	std	Y+62, r25	; 0x3e
    30ea:	8d af       	std	Y+61, r24	; 0x3d
    30ec:	46 c0       	rjmp	.+140    	; 0x317a <main+0xe26>
	else if (__tmp > 65535)
    30ee:	fe 01       	movw	r30, r28
    30f0:	ff 96       	adiw	r30, 0x3f	; 63
    30f2:	60 81       	ld	r22, Z
    30f4:	71 81       	ldd	r23, Z+1	; 0x01
    30f6:	82 81       	ldd	r24, Z+2	; 0x02
    30f8:	93 81       	ldd	r25, Z+3	; 0x03
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	3f ef       	ldi	r19, 0xFF	; 255
    30fe:	4f e7       	ldi	r20, 0x7F	; 127
    3100:	57 e4       	ldi	r21, 0x47	; 71
    3102:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3106:	18 16       	cp	r1, r24
    3108:	64 f5       	brge	.+88     	; 0x3162 <main+0xe0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    310a:	fe 01       	movw	r30, r28
    310c:	ed 5b       	subi	r30, 0xBD	; 189
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	60 81       	ld	r22, Z
    3112:	71 81       	ldd	r23, Z+1	; 0x01
    3114:	82 81       	ldd	r24, Z+2	; 0x02
    3116:	93 81       	ldd	r25, Z+3	; 0x03
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	40 e2       	ldi	r20, 0x20	; 32
    311e:	51 e4       	ldi	r21, 0x41	; 65
    3120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	bc 01       	movw	r22, r24
    312a:	cd 01       	movw	r24, r26
    312c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	9e af       	std	Y+62, r25	; 0x3e
    3136:	8d af       	std	Y+61, r24	; 0x3d
    3138:	0f c0       	rjmp	.+30     	; 0x3158 <main+0xe04>
    313a:	88 ec       	ldi	r24, 0xC8	; 200
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	9c af       	std	Y+60, r25	; 0x3c
    3140:	8b af       	std	Y+59, r24	; 0x3b
    3142:	8b ad       	ldd	r24, Y+59	; 0x3b
    3144:	9c ad       	ldd	r25, Y+60	; 0x3c
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	f1 f7       	brne	.-4      	; 0x3146 <main+0xdf2>
    314a:	9c af       	std	Y+60, r25	; 0x3c
    314c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    314e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3150:	9e ad       	ldd	r25, Y+62	; 0x3e
    3152:	01 97       	sbiw	r24, 0x01	; 1
    3154:	9e af       	std	Y+62, r25	; 0x3e
    3156:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3158:	8d ad       	ldd	r24, Y+61	; 0x3d
    315a:	9e ad       	ldd	r25, Y+62	; 0x3e
    315c:	00 97       	sbiw	r24, 0x00	; 0
    315e:	69 f7       	brne	.-38     	; 0x313a <main+0xde6>
    3160:	ba c0       	rjmp	.+372    	; 0x32d6 <main+0xf82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3162:	fe 01       	movw	r30, r28
    3164:	ff 96       	adiw	r30, 0x3f	; 63
    3166:	60 81       	ld	r22, Z
    3168:	71 81       	ldd	r23, Z+1	; 0x01
    316a:	82 81       	ldd	r24, Z+2	; 0x02
    316c:	93 81       	ldd	r25, Z+3	; 0x03
    316e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	9e af       	std	Y+62, r25	; 0x3e
    3178:	8d af       	std	Y+61, r24	; 0x3d
    317a:	8d ad       	ldd	r24, Y+61	; 0x3d
    317c:	9e ad       	ldd	r25, Y+62	; 0x3e
    317e:	9a af       	std	Y+58, r25	; 0x3a
    3180:	89 af       	std	Y+57, r24	; 0x39
    3182:	89 ad       	ldd	r24, Y+57	; 0x39
    3184:	9a ad       	ldd	r25, Y+58	; 0x3a
    3186:	01 97       	sbiw	r24, 0x01	; 1
    3188:	f1 f7       	brne	.-4      	; 0x3186 <main+0xe32>
    318a:	9a af       	std	Y+58, r25	; 0x3a
    318c:	89 af       	std	Y+57, r24	; 0x39
    318e:	a3 c0       	rjmp	.+326    	; 0x32d6 <main+0xf82>

			case '-':
				_delay_ms(200); // Wait for 200 milliseconds (debouncing)
				while (tries <= 2 && !is_password_correct_f) {
					is_password_correct_f = 0; // Reset flag for correct password entry
    3190:	fe 01       	movw	r30, r28
    3192:	e6 55       	subi	r30, 0x56	; 86
    3194:	ff 4f       	sbci	r31, 0xFF	; 255
    3196:	10 82       	st	Z, r1
					LCD_clearScreen(); // Clear the LCD screen
    3198:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "plz enter pass: "); // Prompt for password entry
    319c:	23 ea       	ldi	r18, 0xA3	; 163
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	80 e0       	ldi	r24, 0x00	; 0
    31a2:	60 e0       	ldi	r22, 0x00	; 0
    31a4:	a9 01       	movw	r20, r18
    31a6:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>
					LCD_moveCursor(1, 0); // Move cursor to the next line
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	60 e0       	ldi	r22, 0x00	; 0
    31ae:	0e 94 22 11 	call	0x2244	; 0x2244 <LCD_moveCursor>
					UART_sendByte(GET_READY_FOR_PASSWORD); // Send request for password entry
    31b2:	82 e5       	ldi	r24, 0x52	; 82
    31b4:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <UART_sendByte>
					getPassword(); // Get password from user
    31b8:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <getPassword>
					sendPassword(password_buffer); // Send password through UART
    31bc:	8b e3       	ldi	r24, 0x3B	; 59
    31be:	91 e0       	ldi	r25, 0x01	; 1
    31c0:	0e 94 55 1b 	call	0x36aa	; 0x36aa <sendPassword>
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	a0 e7       	ldi	r26, 0x70	; 112
    31ca:	b1 e4       	ldi	r27, 0x41	; 65
    31cc:	8d ab       	std	Y+53, r24	; 0x35
    31ce:	9e ab       	std	Y+54, r25	; 0x36
    31d0:	af ab       	std	Y+55, r26	; 0x37
    31d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d4:	6d a9       	ldd	r22, Y+53	; 0x35
    31d6:	7e a9       	ldd	r23, Y+54	; 0x36
    31d8:	8f a9       	ldd	r24, Y+55	; 0x37
    31da:	98 ad       	ldd	r25, Y+56	; 0x38
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	4a ef       	ldi	r20, 0xFA	; 250
    31e2:	54 e4       	ldi	r21, 0x44	; 68
    31e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	89 ab       	std	Y+49, r24	; 0x31
    31ee:	9a ab       	std	Y+50, r25	; 0x32
    31f0:	ab ab       	std	Y+51, r26	; 0x33
    31f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31f4:	69 a9       	ldd	r22, Y+49	; 0x31
    31f6:	7a a9       	ldd	r23, Y+50	; 0x32
    31f8:	8b a9       	ldd	r24, Y+51	; 0x33
    31fa:	9c a9       	ldd	r25, Y+52	; 0x34
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	40 e8       	ldi	r20, 0x80	; 128
    3202:	5f e3       	ldi	r21, 0x3F	; 63
    3204:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3208:	88 23       	and	r24, r24
    320a:	2c f4       	brge	.+10     	; 0x3216 <main+0xec2>
		__ticks = 1;
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	98 ab       	std	Y+48, r25	; 0x30
    3212:	8f a7       	std	Y+47, r24	; 0x2f
    3214:	3f c0       	rjmp	.+126    	; 0x3294 <main+0xf40>
	else if (__tmp > 65535)
    3216:	69 a9       	ldd	r22, Y+49	; 0x31
    3218:	7a a9       	ldd	r23, Y+50	; 0x32
    321a:	8b a9       	ldd	r24, Y+51	; 0x33
    321c:	9c a9       	ldd	r25, Y+52	; 0x34
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	3f ef       	ldi	r19, 0xFF	; 255
    3222:	4f e7       	ldi	r20, 0x7F	; 127
    3224:	57 e4       	ldi	r21, 0x47	; 71
    3226:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    322a:	18 16       	cp	r1, r24
    322c:	4c f5       	brge	.+82     	; 0x3280 <main+0xf2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    322e:	6d a9       	ldd	r22, Y+53	; 0x35
    3230:	7e a9       	ldd	r23, Y+54	; 0x36
    3232:	8f a9       	ldd	r24, Y+55	; 0x37
    3234:	98 ad       	ldd	r25, Y+56	; 0x38
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	40 e2       	ldi	r20, 0x20	; 32
    323c:	51 e4       	ldi	r21, 0x41	; 65
    323e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	bc 01       	movw	r22, r24
    3248:	cd 01       	movw	r24, r26
    324a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	98 ab       	std	Y+48, r25	; 0x30
    3254:	8f a7       	std	Y+47, r24	; 0x2f
    3256:	0f c0       	rjmp	.+30     	; 0x3276 <main+0xf22>
    3258:	88 ec       	ldi	r24, 0xC8	; 200
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	9e a7       	std	Y+46, r25	; 0x2e
    325e:	8d a7       	std	Y+45, r24	; 0x2d
    3260:	8d a5       	ldd	r24, Y+45	; 0x2d
    3262:	9e a5       	ldd	r25, Y+46	; 0x2e
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	f1 f7       	brne	.-4      	; 0x3264 <main+0xf10>
    3268:	9e a7       	std	Y+46, r25	; 0x2e
    326a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    326c:	8f a5       	ldd	r24, Y+47	; 0x2f
    326e:	98 a9       	ldd	r25, Y+48	; 0x30
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	98 ab       	std	Y+48, r25	; 0x30
    3274:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3276:	8f a5       	ldd	r24, Y+47	; 0x2f
    3278:	98 a9       	ldd	r25, Y+48	; 0x30
    327a:	00 97       	sbiw	r24, 0x00	; 0
    327c:	69 f7       	brne	.-38     	; 0x3258 <main+0xf04>
    327e:	14 c0       	rjmp	.+40     	; 0x32a8 <main+0xf54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3280:	69 a9       	ldd	r22, Y+49	; 0x31
    3282:	7a a9       	ldd	r23, Y+50	; 0x32
    3284:	8b a9       	ldd	r24, Y+51	; 0x33
    3286:	9c a9       	ldd	r25, Y+52	; 0x34
    3288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	98 ab       	std	Y+48, r25	; 0x30
    3292:	8f a7       	std	Y+47, r24	; 0x2f
    3294:	8f a5       	ldd	r24, Y+47	; 0x2f
    3296:	98 a9       	ldd	r25, Y+48	; 0x30
    3298:	9c a7       	std	Y+44, r25	; 0x2c
    329a:	8b a7       	std	Y+43, r24	; 0x2b
    329c:	8b a5       	ldd	r24, Y+43	; 0x2b
    329e:	9c a5       	ldd	r25, Y+44	; 0x2c
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	f1 f7       	brne	.-4      	; 0x32a0 <main+0xf4c>
    32a4:	9c a7       	std	Y+44, r25	; 0x2c
    32a6:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(15); // Delay for 15 milliseconds after sending each character

					if (UART_recieveByte() == CORRECT_PASSWORD) { // Check if received password is correct
    32a8:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <UART_recieveByte>
    32ac:	84 35       	cpi	r24, 0x54	; 84
    32ae:	51 f4       	brne	.+20     	; 0x32c4 <main+0xf70>
						is_password_set_f = 0; // Reset flag for password set
    32b0:	fe 01       	movw	r30, r28
    32b2:	e5 55       	subi	r30, 0x55	; 85
    32b4:	ff 4f       	sbci	r31, 0xFF	; 255
    32b6:	10 82       	st	Z, r1
						is_password_correct_f = 1; // Set flag indicating correct password
    32b8:	fe 01       	movw	r30, r28
    32ba:	e6 55       	subi	r30, 0x56	; 86
    32bc:	ff 4f       	sbci	r31, 0xFF	; 255
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	80 83       	st	Z, r24
    32c2:	09 c0       	rjmp	.+18     	; 0x32d6 <main+0xf82>
					} else {
						tries++; // Increment the number of password entry attempts
    32c4:	de 01       	movw	r26, r28
    32c6:	a3 55       	subi	r26, 0x53	; 83
    32c8:	bf 4f       	sbci	r27, 0xFF	; 255
    32ca:	fe 01       	movw	r30, r28
    32cc:	e3 55       	subi	r30, 0x53	; 83
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	80 81       	ld	r24, Z
    32d2:	8f 5f       	subi	r24, 0xFF	; 255
    32d4:	8c 93       	st	X, r24
				is_password_correct_f = 0; // Reset flag for correct password entry
				break; // Exit the switch statement

			case '-':
				_delay_ms(200); // Wait for 200 milliseconds (debouncing)
				while (tries <= 2 && !is_password_correct_f) {
    32d6:	fe 01       	movw	r30, r28
    32d8:	e3 55       	subi	r30, 0x53	; 83
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	80 81       	ld	r24, Z
    32de:	83 30       	cpi	r24, 0x03	; 3
    32e0:	38 f4       	brcc	.+14     	; 0x32f0 <main+0xf9c>
    32e2:	fe 01       	movw	r30, r28
    32e4:	e6 55       	subi	r30, 0x56	; 86
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	80 81       	ld	r24, Z
    32ea:	88 23       	and	r24, r24
    32ec:	09 f4       	brne	.+2      	; 0x32f0 <main+0xf9c>
    32ee:	50 cf       	rjmp	.-352    	; 0x3190 <main+0xe3c>
						is_password_correct_f = 1; // Set flag indicating correct password
					} else {
						tries++; // Increment the number of password entry attempts
					}
				}
				if (is_password_correct_f == 0) { // Check if password was incorrect
    32f0:	fe 01       	movw	r30, r28
    32f2:	e6 55       	subi	r30, 0x56	; 86
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	80 81       	ld	r24, Z
    32f8:	88 23       	and	r24, r24
    32fa:	09 f0       	breq	.+2      	; 0x32fe <main+0xfaa>
    32fc:	3e ca       	rjmp	.-2948   	; 0x277a <main+0x426>
					UART_sendByte(ERROR_ACTION); // Send error action command
    32fe:	89 e4       	ldi	r24, 0x49	; 73
    3300:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <UART_sendByte>
					LCD_clearScreen(); // Clear the LCD screen
    3304:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_clearScreen>
					Timer1_init(&Timer1_config); // Initialize Timer1 for timing operations
    3308:	8b e2       	ldi	r24, 0x2B	; 43
    330a:	91 e0       	ldi	r25, 0x01	; 1
    330c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <Timer1_init>
    3310:	f4 c0       	rjmp	.+488    	; 0x34fa <main+0x11a6>

					// Display unauthorized access message for 60 seconds
					while (timer1_ticks != 60) {
						LCD_displayStringRowColumn(0, 2, "UNAUTHORIZED");
    3312:	2c ed       	ldi	r18, 0xDC	; 220
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	62 e0       	ldi	r22, 0x02	; 2
    331a:	a9 01       	movw	r20, r18
    331c:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 5, "ACCESS");
    3320:	29 ee       	ldi	r18, 0xE9	; 233
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	65 e0       	ldi	r22, 0x05	; 5
    3328:	a9 01       	movw	r20, r18
    332a:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>
    332e:	80 e0       	ldi	r24, 0x00	; 0
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	aa ef       	ldi	r26, 0xFA	; 250
    3334:	b3 e4       	ldi	r27, 0x43	; 67
    3336:	8f a3       	std	Y+39, r24	; 0x27
    3338:	98 a7       	std	Y+40, r25	; 0x28
    333a:	a9 a7       	std	Y+41, r26	; 0x29
    333c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    333e:	6f a1       	ldd	r22, Y+39	; 0x27
    3340:	78 a5       	ldd	r23, Y+40	; 0x28
    3342:	89 a5       	ldd	r24, Y+41	; 0x29
    3344:	9a a5       	ldd	r25, Y+42	; 0x2a
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	4a ef       	ldi	r20, 0xFA	; 250
    334c:	54 e4       	ldi	r21, 0x44	; 68
    334e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	8b a3       	std	Y+35, r24	; 0x23
    3358:	9c a3       	std	Y+36, r25	; 0x24
    335a:	ad a3       	std	Y+37, r26	; 0x25
    335c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    335e:	6b a1       	ldd	r22, Y+35	; 0x23
    3360:	7c a1       	ldd	r23, Y+36	; 0x24
    3362:	8d a1       	ldd	r24, Y+37	; 0x25
    3364:	9e a1       	ldd	r25, Y+38	; 0x26
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	40 e8       	ldi	r20, 0x80	; 128
    336c:	5f e3       	ldi	r21, 0x3F	; 63
    336e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3372:	88 23       	and	r24, r24
    3374:	2c f4       	brge	.+10     	; 0x3380 <main+0x102c>
		__ticks = 1;
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	9a a3       	std	Y+34, r25	; 0x22
    337c:	89 a3       	std	Y+33, r24	; 0x21
    337e:	3f c0       	rjmp	.+126    	; 0x33fe <main+0x10aa>
	else if (__tmp > 65535)
    3380:	6b a1       	ldd	r22, Y+35	; 0x23
    3382:	7c a1       	ldd	r23, Y+36	; 0x24
    3384:	8d a1       	ldd	r24, Y+37	; 0x25
    3386:	9e a1       	ldd	r25, Y+38	; 0x26
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	3f ef       	ldi	r19, 0xFF	; 255
    338c:	4f e7       	ldi	r20, 0x7F	; 127
    338e:	57 e4       	ldi	r21, 0x47	; 71
    3390:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3394:	18 16       	cp	r1, r24
    3396:	4c f5       	brge	.+82     	; 0x33ea <main+0x1096>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3398:	6f a1       	ldd	r22, Y+39	; 0x27
    339a:	78 a5       	ldd	r23, Y+40	; 0x28
    339c:	89 a5       	ldd	r24, Y+41	; 0x29
    339e:	9a a5       	ldd	r25, Y+42	; 0x2a
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	40 e2       	ldi	r20, 0x20	; 32
    33a6:	51 e4       	ldi	r21, 0x41	; 65
    33a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	bc 01       	movw	r22, r24
    33b2:	cd 01       	movw	r24, r26
    33b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	9a a3       	std	Y+34, r25	; 0x22
    33be:	89 a3       	std	Y+33, r24	; 0x21
    33c0:	0f c0       	rjmp	.+30     	; 0x33e0 <main+0x108c>
    33c2:	88 ec       	ldi	r24, 0xC8	; 200
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	98 a3       	std	Y+32, r25	; 0x20
    33c8:	8f 8f       	std	Y+31, r24	; 0x1f
    33ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33cc:	98 a1       	ldd	r25, Y+32	; 0x20
    33ce:	01 97       	sbiw	r24, 0x01	; 1
    33d0:	f1 f7       	brne	.-4      	; 0x33ce <main+0x107a>
    33d2:	98 a3       	std	Y+32, r25	; 0x20
    33d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d6:	89 a1       	ldd	r24, Y+33	; 0x21
    33d8:	9a a1       	ldd	r25, Y+34	; 0x22
    33da:	01 97       	sbiw	r24, 0x01	; 1
    33dc:	9a a3       	std	Y+34, r25	; 0x22
    33de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e0:	89 a1       	ldd	r24, Y+33	; 0x21
    33e2:	9a a1       	ldd	r25, Y+34	; 0x22
    33e4:	00 97       	sbiw	r24, 0x00	; 0
    33e6:	69 f7       	brne	.-38     	; 0x33c2 <main+0x106e>
    33e8:	14 c0       	rjmp	.+40     	; 0x3412 <main+0x10be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ea:	6b a1       	ldd	r22, Y+35	; 0x23
    33ec:	7c a1       	ldd	r23, Y+36	; 0x24
    33ee:	8d a1       	ldd	r24, Y+37	; 0x25
    33f0:	9e a1       	ldd	r25, Y+38	; 0x26
    33f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	9a a3       	std	Y+34, r25	; 0x22
    33fc:	89 a3       	std	Y+33, r24	; 0x21
    33fe:	89 a1       	ldd	r24, Y+33	; 0x21
    3400:	9a a1       	ldd	r25, Y+34	; 0x22
    3402:	9e 8f       	std	Y+30, r25	; 0x1e
    3404:	8d 8f       	std	Y+29, r24	; 0x1d
    3406:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3408:	9e 8d       	ldd	r25, Y+30	; 0x1e
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	f1 f7       	brne	.-4      	; 0x340a <main+0x10b6>
    340e:	9e 8f       	std	Y+30, r25	; 0x1e
    3410:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(500);
						LCD_clearScreen();
    3412:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_clearScreen>
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	aa ef       	ldi	r26, 0xFA	; 250
    341c:	b3 e4       	ldi	r27, 0x43	; 67
    341e:	89 8f       	std	Y+25, r24	; 0x19
    3420:	9a 8f       	std	Y+26, r25	; 0x1a
    3422:	ab 8f       	std	Y+27, r26	; 0x1b
    3424:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3426:	69 8d       	ldd	r22, Y+25	; 0x19
    3428:	7a 8d       	ldd	r23, Y+26	; 0x1a
    342a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    342c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	4a ef       	ldi	r20, 0xFA	; 250
    3434:	54 e4       	ldi	r21, 0x44	; 68
    3436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	8d 8b       	std	Y+21, r24	; 0x15
    3440:	9e 8b       	std	Y+22, r25	; 0x16
    3442:	af 8b       	std	Y+23, r26	; 0x17
    3444:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3446:	6d 89       	ldd	r22, Y+21	; 0x15
    3448:	7e 89       	ldd	r23, Y+22	; 0x16
    344a:	8f 89       	ldd	r24, Y+23	; 0x17
    344c:	98 8d       	ldd	r25, Y+24	; 0x18
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	40 e8       	ldi	r20, 0x80	; 128
    3454:	5f e3       	ldi	r21, 0x3F	; 63
    3456:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    345a:	88 23       	and	r24, r24
    345c:	2c f4       	brge	.+10     	; 0x3468 <main+0x1114>
		__ticks = 1;
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	9c 8b       	std	Y+20, r25	; 0x14
    3464:	8b 8b       	std	Y+19, r24	; 0x13
    3466:	3f c0       	rjmp	.+126    	; 0x34e6 <main+0x1192>
	else if (__tmp > 65535)
    3468:	6d 89       	ldd	r22, Y+21	; 0x15
    346a:	7e 89       	ldd	r23, Y+22	; 0x16
    346c:	8f 89       	ldd	r24, Y+23	; 0x17
    346e:	98 8d       	ldd	r25, Y+24	; 0x18
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	3f ef       	ldi	r19, 0xFF	; 255
    3474:	4f e7       	ldi	r20, 0x7F	; 127
    3476:	57 e4       	ldi	r21, 0x47	; 71
    3478:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    347c:	18 16       	cp	r1, r24
    347e:	4c f5       	brge	.+82     	; 0x34d2 <main+0x117e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3480:	69 8d       	ldd	r22, Y+25	; 0x19
    3482:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3484:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3486:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	40 e2       	ldi	r20, 0x20	; 32
    348e:	51 e4       	ldi	r21, 0x41	; 65
    3490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	bc 01       	movw	r22, r24
    349a:	cd 01       	movw	r24, r26
    349c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	9c 8b       	std	Y+20, r25	; 0x14
    34a6:	8b 8b       	std	Y+19, r24	; 0x13
    34a8:	0f c0       	rjmp	.+30     	; 0x34c8 <main+0x1174>
    34aa:	88 ec       	ldi	r24, 0xC8	; 200
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	9a 8b       	std	Y+18, r25	; 0x12
    34b0:	89 8b       	std	Y+17, r24	; 0x11
    34b2:	89 89       	ldd	r24, Y+17	; 0x11
    34b4:	9a 89       	ldd	r25, Y+18	; 0x12
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	f1 f7       	brne	.-4      	; 0x34b6 <main+0x1162>
    34ba:	9a 8b       	std	Y+18, r25	; 0x12
    34bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34be:	8b 89       	ldd	r24, Y+19	; 0x13
    34c0:	9c 89       	ldd	r25, Y+20	; 0x14
    34c2:	01 97       	sbiw	r24, 0x01	; 1
    34c4:	9c 8b       	std	Y+20, r25	; 0x14
    34c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c8:	8b 89       	ldd	r24, Y+19	; 0x13
    34ca:	9c 89       	ldd	r25, Y+20	; 0x14
    34cc:	00 97       	sbiw	r24, 0x00	; 0
    34ce:	69 f7       	brne	.-38     	; 0x34aa <main+0x1156>
    34d0:	14 c0       	rjmp	.+40     	; 0x34fa <main+0x11a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d2:	6d 89       	ldd	r22, Y+21	; 0x15
    34d4:	7e 89       	ldd	r23, Y+22	; 0x16
    34d6:	8f 89       	ldd	r24, Y+23	; 0x17
    34d8:	98 8d       	ldd	r25, Y+24	; 0x18
    34da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	9c 8b       	std	Y+20, r25	; 0x14
    34e4:	8b 8b       	std	Y+19, r24	; 0x13
    34e6:	8b 89       	ldd	r24, Y+19	; 0x13
    34e8:	9c 89       	ldd	r25, Y+20	; 0x14
    34ea:	98 8b       	std	Y+16, r25	; 0x10
    34ec:	8f 87       	std	Y+15, r24	; 0x0f
    34ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    34f0:	98 89       	ldd	r25, Y+16	; 0x10
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	f1 f7       	brne	.-4      	; 0x34f2 <main+0x119e>
    34f6:	98 8b       	std	Y+16, r25	; 0x10
    34f8:	8f 87       	std	Y+15, r24	; 0x0f
					UART_sendByte(ERROR_ACTION); // Send error action command
					LCD_clearScreen(); // Clear the LCD screen
					Timer1_init(&Timer1_config); // Initialize Timer1 for timing operations

					// Display unauthorized access message for 60 seconds
					while (timer1_ticks != 60) {
    34fa:	80 91 3a 01 	lds	r24, 0x013A
    34fe:	8c 33       	cpi	r24, 0x3C	; 60
    3500:	09 f0       	breq	.+2      	; 0x3504 <main+0x11b0>
    3502:	07 cf       	rjmp	.-498    	; 0x3312 <main+0xfbe>
						_delay_ms(500);
						LCD_clearScreen();
						_delay_ms(500);
					}

					timer1_ticks = 0; // Reset Timer1 ticks
    3504:	10 92 3a 01 	sts	0x013A, r1
					Timer1_deinit(); // Deinitialize Timer1
    3508:	0e 94 4e 09 	call	0x129c	; 0x129c <Timer1_deinit>
    350c:	36 c9       	rjmp	.-3476   	; 0x277a <main+0x426>
				}

				break; // Exit the switch statement
			}
		} else {
			is_matched_f = 1; // Reset flag for password match
    350e:	fe 01       	movw	r30, r28
    3510:	e4 55       	subi	r30, 0x54	; 84
    3512:	ff 4f       	sbci	r31, 0xFF	; 255
    3514:	81 e0       	ldi	r24, 0x01	; 1
    3516:	80 83       	st	Z, r24
			LCD_clearScreen(); // Clear the LCD screen
    3518:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_clearScreen>
			LCD_displayString("plz enter pass: "); // Prompt for password entry
    351c:	83 ea       	ldi	r24, 0xA3	; 163
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_displayString>
			LCD_moveCursor(1, 0); // Move cursor to the next line
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	60 e0       	ldi	r22, 0x00	; 0
    3528:	0e 94 22 11 	call	0x2244	; 0x2244 <LCD_moveCursor>
			UART_sendByte(GET_READY_FOR_PASSWORD_ONE); // Send request for first password entry
    352c:	8f e4       	ldi	r24, 0x4F	; 79
    352e:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <UART_sendByte>
			getPassword(); // Get password from user
    3532:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <getPassword>
			sendPassword(password_buffer); // Send password through UART
    3536:	8b e3       	ldi	r24, 0x3B	; 59
    3538:	91 e0       	ldi	r25, 0x01	; 1
    353a:	0e 94 55 1b 	call	0x36aa	; 0x36aa <sendPassword>

			LCD_clearScreen(); // Clear the LCD screen
    353e:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_clearScreen>
			LCD_displayString("plz re-enter the"); // Prompt for re-entering password
    3542:	80 ef       	ldi	r24, 0xF0	; 240
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "same pass: "); // Display message for re-entering password
    354a:	21 e0       	ldi	r18, 0x01	; 1
    354c:	31 e0       	ldi	r19, 0x01	; 1
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	60 e0       	ldi	r22, 0x00	; 0
    3552:	a9 01       	movw	r20, r18
    3554:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 11); // Move cursor to the last character position
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	6b e0       	ldi	r22, 0x0B	; 11
    355c:	0e 94 22 11 	call	0x2244	; 0x2244 <LCD_moveCursor>

			UART_sendByte(GET_READY_FOR_PASSWORD_TWO); // Send request for second password entry
    3560:	80 e5       	ldi	r24, 0x50	; 80
    3562:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <UART_sendByte>
			getPassword(); // Get password from user
    3566:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <getPassword>
			sendPassword(password_buffer); // Send password through UART
    356a:	8b e3       	ldi	r24, 0x3B	; 59
    356c:	91 e0       	ldi	r25, 0x01	; 1
    356e:	0e 94 55 1b 	call	0x36aa	; 0x36aa <sendPassword>
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	a0 e7       	ldi	r26, 0x70	; 112
    3578:	b1 e4       	ldi	r27, 0x41	; 65
    357a:	8b 87       	std	Y+11, r24	; 0x0b
    357c:	9c 87       	std	Y+12, r25	; 0x0c
    357e:	ad 87       	std	Y+13, r26	; 0x0d
    3580:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3582:	6b 85       	ldd	r22, Y+11	; 0x0b
    3584:	7c 85       	ldd	r23, Y+12	; 0x0c
    3586:	8d 85       	ldd	r24, Y+13	; 0x0d
    3588:	9e 85       	ldd	r25, Y+14	; 0x0e
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	4a ef       	ldi	r20, 0xFA	; 250
    3590:	54 e4       	ldi	r21, 0x44	; 68
    3592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	8f 83       	std	Y+7, r24	; 0x07
    359c:	98 87       	std	Y+8, r25	; 0x08
    359e:	a9 87       	std	Y+9, r26	; 0x09
    35a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35a2:	6f 81       	ldd	r22, Y+7	; 0x07
    35a4:	78 85       	ldd	r23, Y+8	; 0x08
    35a6:	89 85       	ldd	r24, Y+9	; 0x09
    35a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	40 e8       	ldi	r20, 0x80	; 128
    35b0:	5f e3       	ldi	r21, 0x3F	; 63
    35b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35b6:	88 23       	and	r24, r24
    35b8:	2c f4       	brge	.+10     	; 0x35c4 <main+0x1270>
		__ticks = 1;
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	9e 83       	std	Y+6, r25	; 0x06
    35c0:	8d 83       	std	Y+5, r24	; 0x05
    35c2:	3f c0       	rjmp	.+126    	; 0x3642 <main+0x12ee>
	else if (__tmp > 65535)
    35c4:	6f 81       	ldd	r22, Y+7	; 0x07
    35c6:	78 85       	ldd	r23, Y+8	; 0x08
    35c8:	89 85       	ldd	r24, Y+9	; 0x09
    35ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	3f ef       	ldi	r19, 0xFF	; 255
    35d0:	4f e7       	ldi	r20, 0x7F	; 127
    35d2:	57 e4       	ldi	r21, 0x47	; 71
    35d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35d8:	18 16       	cp	r1, r24
    35da:	4c f5       	brge	.+82     	; 0x362e <main+0x12da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    35de:	7c 85       	ldd	r23, Y+12	; 0x0c
    35e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	40 e2       	ldi	r20, 0x20	; 32
    35ea:	51 e4       	ldi	r21, 0x41	; 65
    35ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f0:	dc 01       	movw	r26, r24
    35f2:	cb 01       	movw	r24, r22
    35f4:	bc 01       	movw	r22, r24
    35f6:	cd 01       	movw	r24, r26
    35f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	9e 83       	std	Y+6, r25	; 0x06
    3602:	8d 83       	std	Y+5, r24	; 0x05
    3604:	0f c0       	rjmp	.+30     	; 0x3624 <main+0x12d0>
    3606:	88 ec       	ldi	r24, 0xC8	; 200
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	9c 83       	std	Y+4, r25	; 0x04
    360c:	8b 83       	std	Y+3, r24	; 0x03
    360e:	8b 81       	ldd	r24, Y+3	; 0x03
    3610:	9c 81       	ldd	r25, Y+4	; 0x04
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	f1 f7       	brne	.-4      	; 0x3612 <main+0x12be>
    3616:	9c 83       	std	Y+4, r25	; 0x04
    3618:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    361a:	8d 81       	ldd	r24, Y+5	; 0x05
    361c:	9e 81       	ldd	r25, Y+6	; 0x06
    361e:	01 97       	sbiw	r24, 0x01	; 1
    3620:	9e 83       	std	Y+6, r25	; 0x06
    3622:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3624:	8d 81       	ldd	r24, Y+5	; 0x05
    3626:	9e 81       	ldd	r25, Y+6	; 0x06
    3628:	00 97       	sbiw	r24, 0x00	; 0
    362a:	69 f7       	brne	.-38     	; 0x3606 <main+0x12b2>
    362c:	14 c0       	rjmp	.+40     	; 0x3656 <main+0x1302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    362e:	6f 81       	ldd	r22, Y+7	; 0x07
    3630:	78 85       	ldd	r23, Y+8	; 0x08
    3632:	89 85       	ldd	r24, Y+9	; 0x09
    3634:	9a 85       	ldd	r25, Y+10	; 0x0a
    3636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	9e 83       	std	Y+6, r25	; 0x06
    3640:	8d 83       	std	Y+5, r24	; 0x05
    3642:	8d 81       	ldd	r24, Y+5	; 0x05
    3644:	9e 81       	ldd	r25, Y+6	; 0x06
    3646:	9a 83       	std	Y+2, r25	; 0x02
    3648:	89 83       	std	Y+1, r24	; 0x01
    364a:	89 81       	ldd	r24, Y+1	; 0x01
    364c:	9a 81       	ldd	r25, Y+2	; 0x02
    364e:	01 97       	sbiw	r24, 0x01	; 1
    3650:	f1 f7       	brne	.-4      	; 0x364e <main+0x12fa>
    3652:	9a 83       	std	Y+2, r25	; 0x02
    3654:	89 83       	std	Y+1, r24	; 0x01

			_delay_ms(15); // Delay for 15 milliseconds after sending password

			UART_sendByte(IS_MATCHED); // Send request to check if passwords match
    3656:	81 e4       	ldi	r24, 0x41	; 65
    3658:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <UART_sendByte>
			is_matched_f = UART_recieveByte(); // Receive response for password match
    365c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <UART_recieveByte>
    3660:	fe 01       	movw	r30, r28
    3662:	e4 55       	subi	r30, 0x54	; 84
    3664:	ff 4f       	sbci	r31, 0xFF	; 255
    3666:	80 83       	st	Z, r24

			if (is_matched_f == MATCHED) { // Check if passwords matched
    3668:	fe 01       	movw	r30, r28
    366a:	e4 55       	subi	r30, 0x54	; 84
    366c:	ff 4f       	sbci	r31, 0xFF	; 255
    366e:	80 81       	ld	r24, Z
    3670:	83 35       	cpi	r24, 0x53	; 83
    3672:	51 f4       	brne	.+20     	; 0x3688 <main+0x1334>
				is_password_set_f = 1; // Set flag indicating password is set
    3674:	fe 01       	movw	r30, r28
    3676:	e5 55       	subi	r30, 0x55	; 85
    3678:	ff 4f       	sbci	r31, 0xFF	; 255
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	80 83       	st	Z, r24
				is_matched_f = 0; // Reset flag for password match
    367e:	fe 01       	movw	r30, r28
    3680:	e4 55       	subi	r30, 0x54	; 84
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	10 82       	st	Z, r1
    3686:	79 c8       	rjmp	.-3854   	; 0x277a <main+0x426>
			} else {
				LCD_clearScreen(); // Clear the LCD screen
    3688:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 3, "UNMATCHED!"); // Display unmatched message
    368c:	2d e0       	ldi	r18, 0x0D	; 13
    368e:	31 e0       	ldi	r19, 0x01	; 1
    3690:	80 e0       	ldi	r24, 0x00	; 0
    3692:	63 e0       	ldi	r22, 0x03	; 3
    3694:	a9 01       	movw	r20, r18
    3696:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(0, 3, "TRY  AGAIN"); // Display retry message
    369a:	28 e1       	ldi	r18, 0x18	; 24
    369c:	31 e0       	ldi	r19, 0x01	; 1
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	63 e0       	ldi	r22, 0x03	; 3
    36a2:	a9 01       	movw	r20, r18
    36a4:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_displayStringRowColumn>
    36a8:	68 c8       	rjmp	.-3888   	; 0x277a <main+0x426>

000036aa <sendPassword>:
		}
	}
	return 0;
}

void sendPassword(uint8 *password) {
    36aa:	df 93       	push	r29
    36ac:	cf 93       	push	r28
    36ae:	cd b7       	in	r28, 0x3d	; 61
    36b0:	de b7       	in	r29, 0x3e	; 62
    36b2:	60 97       	sbiw	r28, 0x10	; 16
    36b4:	0f b6       	in	r0, 0x3f	; 63
    36b6:	f8 94       	cli
    36b8:	de bf       	out	0x3e, r29	; 62
    36ba:	0f be       	out	0x3f, r0	; 63
    36bc:	cd bf       	out	0x3d, r28	; 61
    36be:	98 8b       	std	Y+16, r25	; 0x10
    36c0:	8f 87       	std	Y+15, r24	; 0x0f
    for (i_counter = 0; i_counter < PASSWORD_SIZE; i_counter++) {
    36c2:	10 92 40 01 	sts	0x0140, r1
    36c6:	83 c0       	rjmp	.+262    	; 0x37ce <sendPassword+0x124>
        UART_sendByte(*(password + i_counter)); // Send each character of the password through UART
    36c8:	80 91 40 01 	lds	r24, 0x0140
    36cc:	28 2f       	mov	r18, r24
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d2:	98 89       	ldd	r25, Y+16	; 0x10
    36d4:	fc 01       	movw	r30, r24
    36d6:	e2 0f       	add	r30, r18
    36d8:	f3 1f       	adc	r31, r19
    36da:	80 81       	ld	r24, Z
    36dc:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <UART_sendByte>
    36e0:	80 e0       	ldi	r24, 0x00	; 0
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	a0 e7       	ldi	r26, 0x70	; 112
    36e6:	b1 e4       	ldi	r27, 0x41	; 65
    36e8:	8b 87       	std	Y+11, r24	; 0x0b
    36ea:	9c 87       	std	Y+12, r25	; 0x0c
    36ec:	ad 87       	std	Y+13, r26	; 0x0d
    36ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	4a ef       	ldi	r20, 0xFA	; 250
    36fe:	54 e4       	ldi	r21, 0x44	; 68
    3700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	8f 83       	std	Y+7, r24	; 0x07
    370a:	98 87       	std	Y+8, r25	; 0x08
    370c:	a9 87       	std	Y+9, r26	; 0x09
    370e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3710:	6f 81       	ldd	r22, Y+7	; 0x07
    3712:	78 85       	ldd	r23, Y+8	; 0x08
    3714:	89 85       	ldd	r24, Y+9	; 0x09
    3716:	9a 85       	ldd	r25, Y+10	; 0x0a
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	40 e8       	ldi	r20, 0x80	; 128
    371e:	5f e3       	ldi	r21, 0x3F	; 63
    3720:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3724:	88 23       	and	r24, r24
    3726:	2c f4       	brge	.+10     	; 0x3732 <sendPassword+0x88>
		__ticks = 1;
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	9e 83       	std	Y+6, r25	; 0x06
    372e:	8d 83       	std	Y+5, r24	; 0x05
    3730:	3f c0       	rjmp	.+126    	; 0x37b0 <sendPassword+0x106>
	else if (__tmp > 65535)
    3732:	6f 81       	ldd	r22, Y+7	; 0x07
    3734:	78 85       	ldd	r23, Y+8	; 0x08
    3736:	89 85       	ldd	r24, Y+9	; 0x09
    3738:	9a 85       	ldd	r25, Y+10	; 0x0a
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	3f ef       	ldi	r19, 0xFF	; 255
    373e:	4f e7       	ldi	r20, 0x7F	; 127
    3740:	57 e4       	ldi	r21, 0x47	; 71
    3742:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3746:	18 16       	cp	r1, r24
    3748:	4c f5       	brge	.+82     	; 0x379c <sendPassword+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    374a:	6b 85       	ldd	r22, Y+11	; 0x0b
    374c:	7c 85       	ldd	r23, Y+12	; 0x0c
    374e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3750:	9e 85       	ldd	r25, Y+14	; 0x0e
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	40 e2       	ldi	r20, 0x20	; 32
    3758:	51 e4       	ldi	r21, 0x41	; 65
    375a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	bc 01       	movw	r22, r24
    3764:	cd 01       	movw	r24, r26
    3766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	9e 83       	std	Y+6, r25	; 0x06
    3770:	8d 83       	std	Y+5, r24	; 0x05
    3772:	0f c0       	rjmp	.+30     	; 0x3792 <sendPassword+0xe8>
    3774:	88 ec       	ldi	r24, 0xC8	; 200
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	9c 83       	std	Y+4, r25	; 0x04
    377a:	8b 83       	std	Y+3, r24	; 0x03
    377c:	8b 81       	ldd	r24, Y+3	; 0x03
    377e:	9c 81       	ldd	r25, Y+4	; 0x04
    3780:	01 97       	sbiw	r24, 0x01	; 1
    3782:	f1 f7       	brne	.-4      	; 0x3780 <sendPassword+0xd6>
    3784:	9c 83       	std	Y+4, r25	; 0x04
    3786:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3788:	8d 81       	ldd	r24, Y+5	; 0x05
    378a:	9e 81       	ldd	r25, Y+6	; 0x06
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	9e 83       	std	Y+6, r25	; 0x06
    3790:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3792:	8d 81       	ldd	r24, Y+5	; 0x05
    3794:	9e 81       	ldd	r25, Y+6	; 0x06
    3796:	00 97       	sbiw	r24, 0x00	; 0
    3798:	69 f7       	brne	.-38     	; 0x3774 <sendPassword+0xca>
    379a:	14 c0       	rjmp	.+40     	; 0x37c4 <sendPassword+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    379c:	6f 81       	ldd	r22, Y+7	; 0x07
    379e:	78 85       	ldd	r23, Y+8	; 0x08
    37a0:	89 85       	ldd	r24, Y+9	; 0x09
    37a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	9e 83       	std	Y+6, r25	; 0x06
    37ae:	8d 83       	std	Y+5, r24	; 0x05
    37b0:	8d 81       	ldd	r24, Y+5	; 0x05
    37b2:	9e 81       	ldd	r25, Y+6	; 0x06
    37b4:	9a 83       	std	Y+2, r25	; 0x02
    37b6:	89 83       	std	Y+1, r24	; 0x01
    37b8:	89 81       	ldd	r24, Y+1	; 0x01
    37ba:	9a 81       	ldd	r25, Y+2	; 0x02
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	f1 f7       	brne	.-4      	; 0x37bc <sendPassword+0x112>
    37c0:	9a 83       	std	Y+2, r25	; 0x02
    37c2:	89 83       	std	Y+1, r24	; 0x01
	}
	return 0;
}

void sendPassword(uint8 *password) {
    for (i_counter = 0; i_counter < PASSWORD_SIZE; i_counter++) {
    37c4:	80 91 40 01 	lds	r24, 0x0140
    37c8:	8f 5f       	subi	r24, 0xFF	; 255
    37ca:	80 93 40 01 	sts	0x0140, r24
    37ce:	80 91 40 01 	lds	r24, 0x0140
    37d2:	85 30       	cpi	r24, 0x05	; 5
    37d4:	08 f4       	brcc	.+2      	; 0x37d8 <sendPassword+0x12e>
    37d6:	78 cf       	rjmp	.-272    	; 0x36c8 <sendPassword+0x1e>
        UART_sendByte(*(password + i_counter)); // Send each character of the password through UART
        _delay_ms(15); // Delay for 15 milliseconds after sending each character
    }
}
    37d8:	60 96       	adiw	r28, 0x10	; 16
    37da:	0f b6       	in	r0, 0x3f	; 63
    37dc:	f8 94       	cli
    37de:	de bf       	out	0x3e, r29	; 62
    37e0:	0f be       	out	0x3f, r0	; 63
    37e2:	cd bf       	out	0x3d, r28	; 61
    37e4:	cf 91       	pop	r28
    37e6:	df 91       	pop	r29
    37e8:	08 95       	ret

000037ea <getPassword>:

void getPassword(void) {
    37ea:	0f 93       	push	r16
    37ec:	1f 93       	push	r17
    37ee:	df 93       	push	r29
    37f0:	cf 93       	push	r28
    37f2:	cd b7       	in	r28, 0x3d	; 61
    37f4:	de b7       	in	r29, 0x3e	; 62
    37f6:	2e 97       	sbiw	r28, 0x0e	; 14
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	f8 94       	cli
    37fc:	de bf       	out	0x3e, r29	; 62
    37fe:	0f be       	out	0x3f, r0	; 63
    3800:	cd bf       	out	0x3d, r28	; 61
    for (i_counter = 0; i_counter < PASSWORD_SIZE; i_counter++) {
    3802:	10 92 40 01 	sts	0x0140, r1
    3806:	85 c0       	rjmp	.+266    	; 0x3912 <getPassword+0x128>
        *(password_buffer + i_counter) = KEYPAD_getPressedKey(); // Store pressed keys in password_buffer array
    3808:	80 91 40 01 	lds	r24, 0x0140
    380c:	88 2f       	mov	r24, r24
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	8c 01       	movw	r16, r24
    3812:	05 5c       	subi	r16, 0xC5	; 197
    3814:	1e 4f       	sbci	r17, 0xFE	; 254
    3816:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <KEYPAD_getPressedKey>
    381a:	f8 01       	movw	r30, r16
    381c:	80 83       	st	Z, r24
        LCD_displayCharacter('*'); // Display asterisk to hide entered characters
    381e:	8a e2       	ldi	r24, 0x2A	; 42
    3820:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <LCD_displayCharacter>
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	aa ef       	ldi	r26, 0xFA	; 250
    382a:	b3 e4       	ldi	r27, 0x43	; 67
    382c:	8b 87       	std	Y+11, r24	; 0x0b
    382e:	9c 87       	std	Y+12, r25	; 0x0c
    3830:	ad 87       	std	Y+13, r26	; 0x0d
    3832:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3834:	6b 85       	ldd	r22, Y+11	; 0x0b
    3836:	7c 85       	ldd	r23, Y+12	; 0x0c
    3838:	8d 85       	ldd	r24, Y+13	; 0x0d
    383a:	9e 85       	ldd	r25, Y+14	; 0x0e
    383c:	20 e0       	ldi	r18, 0x00	; 0
    383e:	30 e0       	ldi	r19, 0x00	; 0
    3840:	4a ef       	ldi	r20, 0xFA	; 250
    3842:	54 e4       	ldi	r21, 0x44	; 68
    3844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3848:	dc 01       	movw	r26, r24
    384a:	cb 01       	movw	r24, r22
    384c:	8f 83       	std	Y+7, r24	; 0x07
    384e:	98 87       	std	Y+8, r25	; 0x08
    3850:	a9 87       	std	Y+9, r26	; 0x09
    3852:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3854:	6f 81       	ldd	r22, Y+7	; 0x07
    3856:	78 85       	ldd	r23, Y+8	; 0x08
    3858:	89 85       	ldd	r24, Y+9	; 0x09
    385a:	9a 85       	ldd	r25, Y+10	; 0x0a
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	40 e8       	ldi	r20, 0x80	; 128
    3862:	5f e3       	ldi	r21, 0x3F	; 63
    3864:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3868:	88 23       	and	r24, r24
    386a:	2c f4       	brge	.+10     	; 0x3876 <getPassword+0x8c>
		__ticks = 1;
    386c:	81 e0       	ldi	r24, 0x01	; 1
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	9e 83       	std	Y+6, r25	; 0x06
    3872:	8d 83       	std	Y+5, r24	; 0x05
    3874:	3f c0       	rjmp	.+126    	; 0x38f4 <getPassword+0x10a>
	else if (__tmp > 65535)
    3876:	6f 81       	ldd	r22, Y+7	; 0x07
    3878:	78 85       	ldd	r23, Y+8	; 0x08
    387a:	89 85       	ldd	r24, Y+9	; 0x09
    387c:	9a 85       	ldd	r25, Y+10	; 0x0a
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	3f ef       	ldi	r19, 0xFF	; 255
    3882:	4f e7       	ldi	r20, 0x7F	; 127
    3884:	57 e4       	ldi	r21, 0x47	; 71
    3886:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    388a:	18 16       	cp	r1, r24
    388c:	4c f5       	brge	.+82     	; 0x38e0 <getPassword+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    388e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3890:	7c 85       	ldd	r23, Y+12	; 0x0c
    3892:	8d 85       	ldd	r24, Y+13	; 0x0d
    3894:	9e 85       	ldd	r25, Y+14	; 0x0e
    3896:	20 e0       	ldi	r18, 0x00	; 0
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	40 e2       	ldi	r20, 0x20	; 32
    389c:	51 e4       	ldi	r21, 0x41	; 65
    389e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a2:	dc 01       	movw	r26, r24
    38a4:	cb 01       	movw	r24, r22
    38a6:	bc 01       	movw	r22, r24
    38a8:	cd 01       	movw	r24, r26
    38aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ae:	dc 01       	movw	r26, r24
    38b0:	cb 01       	movw	r24, r22
    38b2:	9e 83       	std	Y+6, r25	; 0x06
    38b4:	8d 83       	std	Y+5, r24	; 0x05
    38b6:	0f c0       	rjmp	.+30     	; 0x38d6 <getPassword+0xec>
    38b8:	88 ec       	ldi	r24, 0xC8	; 200
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	9c 83       	std	Y+4, r25	; 0x04
    38be:	8b 83       	std	Y+3, r24	; 0x03
    38c0:	8b 81       	ldd	r24, Y+3	; 0x03
    38c2:	9c 81       	ldd	r25, Y+4	; 0x04
    38c4:	01 97       	sbiw	r24, 0x01	; 1
    38c6:	f1 f7       	brne	.-4      	; 0x38c4 <getPassword+0xda>
    38c8:	9c 83       	std	Y+4, r25	; 0x04
    38ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38cc:	8d 81       	ldd	r24, Y+5	; 0x05
    38ce:	9e 81       	ldd	r25, Y+6	; 0x06
    38d0:	01 97       	sbiw	r24, 0x01	; 1
    38d2:	9e 83       	std	Y+6, r25	; 0x06
    38d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38d6:	8d 81       	ldd	r24, Y+5	; 0x05
    38d8:	9e 81       	ldd	r25, Y+6	; 0x06
    38da:	00 97       	sbiw	r24, 0x00	; 0
    38dc:	69 f7       	brne	.-38     	; 0x38b8 <getPassword+0xce>
    38de:	14 c0       	rjmp	.+40     	; 0x3908 <getPassword+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38e0:	6f 81       	ldd	r22, Y+7	; 0x07
    38e2:	78 85       	ldd	r23, Y+8	; 0x08
    38e4:	89 85       	ldd	r24, Y+9	; 0x09
    38e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ec:	dc 01       	movw	r26, r24
    38ee:	cb 01       	movw	r24, r22
    38f0:	9e 83       	std	Y+6, r25	; 0x06
    38f2:	8d 83       	std	Y+5, r24	; 0x05
    38f4:	8d 81       	ldd	r24, Y+5	; 0x05
    38f6:	9e 81       	ldd	r25, Y+6	; 0x06
    38f8:	9a 83       	std	Y+2, r25	; 0x02
    38fa:	89 83       	std	Y+1, r24	; 0x01
    38fc:	89 81       	ldd	r24, Y+1	; 0x01
    38fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3900:	01 97       	sbiw	r24, 0x01	; 1
    3902:	f1 f7       	brne	.-4      	; 0x3900 <getPassword+0x116>
    3904:	9a 83       	std	Y+2, r25	; 0x02
    3906:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(15); // Delay for 15 milliseconds after sending each character
    }
}

void getPassword(void) {
    for (i_counter = 0; i_counter < PASSWORD_SIZE; i_counter++) {
    3908:	80 91 40 01 	lds	r24, 0x0140
    390c:	8f 5f       	subi	r24, 0xFF	; 255
    390e:	80 93 40 01 	sts	0x0140, r24
    3912:	80 91 40 01 	lds	r24, 0x0140
    3916:	85 30       	cpi	r24, 0x05	; 5
    3918:	08 f4       	brcc	.+2      	; 0x391c <getPassword+0x132>
    391a:	76 cf       	rjmp	.-276    	; 0x3808 <getPassword+0x1e>
        *(password_buffer + i_counter) = KEYPAD_getPressedKey(); // Store pressed keys in password_buffer array
        LCD_displayCharacter('*'); // Display asterisk to hide entered characters
        _delay_ms(500); // Delay for 500 milliseconds (debouncing)
    }
    while (KEYPAD_getPressedKey() != '='); // Wait until user presses '=' key (finish entering password)
    391c:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <KEYPAD_getPressedKey>
    3920:	8d 33       	cpi	r24, 0x3D	; 61
    3922:	e1 f7       	brne	.-8      	; 0x391c <getPassword+0x132>
}
    3924:	2e 96       	adiw	r28, 0x0e	; 14
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	f8 94       	cli
    392a:	de bf       	out	0x3e, r29	; 62
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	cd bf       	out	0x3d, r28	; 61
    3930:	cf 91       	pop	r28
    3932:	df 91       	pop	r29
    3934:	1f 91       	pop	r17
    3936:	0f 91       	pop	r16
    3938:	08 95       	ret

0000393a <timer1TickIncrement>:

void timer1TickIncrement(void) {
    393a:	df 93       	push	r29
    393c:	cf 93       	push	r28
    393e:	cd b7       	in	r28, 0x3d	; 61
    3940:	de b7       	in	r29, 0x3e	; 62
    timer1_ticks++; // Increment the volatile variable timer1_ticks
    3942:	80 91 3a 01 	lds	r24, 0x013A
    3946:	8f 5f       	subi	r24, 0xFF	; 255
    3948:	80 93 3a 01 	sts	0x013A, r24
}
    394c:	cf 91       	pop	r28
    394e:	df 91       	pop	r29
    3950:	08 95       	ret

00003952 <__udivmodsi4>:
    3952:	a1 e2       	ldi	r26, 0x21	; 33
    3954:	1a 2e       	mov	r1, r26
    3956:	aa 1b       	sub	r26, r26
    3958:	bb 1b       	sub	r27, r27
    395a:	fd 01       	movw	r30, r26
    395c:	0d c0       	rjmp	.+26     	; 0x3978 <__udivmodsi4_ep>

0000395e <__udivmodsi4_loop>:
    395e:	aa 1f       	adc	r26, r26
    3960:	bb 1f       	adc	r27, r27
    3962:	ee 1f       	adc	r30, r30
    3964:	ff 1f       	adc	r31, r31
    3966:	a2 17       	cp	r26, r18
    3968:	b3 07       	cpc	r27, r19
    396a:	e4 07       	cpc	r30, r20
    396c:	f5 07       	cpc	r31, r21
    396e:	20 f0       	brcs	.+8      	; 0x3978 <__udivmodsi4_ep>
    3970:	a2 1b       	sub	r26, r18
    3972:	b3 0b       	sbc	r27, r19
    3974:	e4 0b       	sbc	r30, r20
    3976:	f5 0b       	sbc	r31, r21

00003978 <__udivmodsi4_ep>:
    3978:	66 1f       	adc	r22, r22
    397a:	77 1f       	adc	r23, r23
    397c:	88 1f       	adc	r24, r24
    397e:	99 1f       	adc	r25, r25
    3980:	1a 94       	dec	r1
    3982:	69 f7       	brne	.-38     	; 0x395e <__udivmodsi4_loop>
    3984:	60 95       	com	r22
    3986:	70 95       	com	r23
    3988:	80 95       	com	r24
    398a:	90 95       	com	r25
    398c:	9b 01       	movw	r18, r22
    398e:	ac 01       	movw	r20, r24
    3990:	bd 01       	movw	r22, r26
    3992:	cf 01       	movw	r24, r30
    3994:	08 95       	ret

00003996 <__prologue_saves__>:
    3996:	2f 92       	push	r2
    3998:	3f 92       	push	r3
    399a:	4f 92       	push	r4
    399c:	5f 92       	push	r5
    399e:	6f 92       	push	r6
    39a0:	7f 92       	push	r7
    39a2:	8f 92       	push	r8
    39a4:	9f 92       	push	r9
    39a6:	af 92       	push	r10
    39a8:	bf 92       	push	r11
    39aa:	cf 92       	push	r12
    39ac:	df 92       	push	r13
    39ae:	ef 92       	push	r14
    39b0:	ff 92       	push	r15
    39b2:	0f 93       	push	r16
    39b4:	1f 93       	push	r17
    39b6:	cf 93       	push	r28
    39b8:	df 93       	push	r29
    39ba:	cd b7       	in	r28, 0x3d	; 61
    39bc:	de b7       	in	r29, 0x3e	; 62
    39be:	ca 1b       	sub	r28, r26
    39c0:	db 0b       	sbc	r29, r27
    39c2:	0f b6       	in	r0, 0x3f	; 63
    39c4:	f8 94       	cli
    39c6:	de bf       	out	0x3e, r29	; 62
    39c8:	0f be       	out	0x3f, r0	; 63
    39ca:	cd bf       	out	0x3d, r28	; 61
    39cc:	09 94       	ijmp

000039ce <__epilogue_restores__>:
    39ce:	2a 88       	ldd	r2, Y+18	; 0x12
    39d0:	39 88       	ldd	r3, Y+17	; 0x11
    39d2:	48 88       	ldd	r4, Y+16	; 0x10
    39d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    39d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    39d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    39da:	8c 84       	ldd	r8, Y+12	; 0x0c
    39dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    39de:	aa 84       	ldd	r10, Y+10	; 0x0a
    39e0:	b9 84       	ldd	r11, Y+9	; 0x09
    39e2:	c8 84       	ldd	r12, Y+8	; 0x08
    39e4:	df 80       	ldd	r13, Y+7	; 0x07
    39e6:	ee 80       	ldd	r14, Y+6	; 0x06
    39e8:	fd 80       	ldd	r15, Y+5	; 0x05
    39ea:	0c 81       	ldd	r16, Y+4	; 0x04
    39ec:	1b 81       	ldd	r17, Y+3	; 0x03
    39ee:	aa 81       	ldd	r26, Y+2	; 0x02
    39f0:	b9 81       	ldd	r27, Y+1	; 0x01
    39f2:	ce 0f       	add	r28, r30
    39f4:	d1 1d       	adc	r29, r1
    39f6:	0f b6       	in	r0, 0x3f	; 63
    39f8:	f8 94       	cli
    39fa:	de bf       	out	0x3e, r29	; 62
    39fc:	0f be       	out	0x3f, r0	; 63
    39fe:	cd bf       	out	0x3d, r28	; 61
    3a00:	ed 01       	movw	r28, r26
    3a02:	08 95       	ret

00003a04 <itoa>:
    3a04:	fb 01       	movw	r30, r22
    3a06:	9f 01       	movw	r18, r30
    3a08:	e8 94       	clt
    3a0a:	42 30       	cpi	r20, 0x02	; 2
    3a0c:	c4 f0       	brlt	.+48     	; 0x3a3e <itoa+0x3a>
    3a0e:	45 32       	cpi	r20, 0x25	; 37
    3a10:	b4 f4       	brge	.+44     	; 0x3a3e <itoa+0x3a>
    3a12:	4a 30       	cpi	r20, 0x0A	; 10
    3a14:	29 f4       	brne	.+10     	; 0x3a20 <itoa+0x1c>
    3a16:	97 fb       	bst	r25, 7
    3a18:	1e f4       	brtc	.+6      	; 0x3a20 <itoa+0x1c>
    3a1a:	90 95       	com	r25
    3a1c:	81 95       	neg	r24
    3a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a20:	64 2f       	mov	r22, r20
    3a22:	77 27       	eor	r23, r23
    3a24:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <__udivmodhi4>
    3a28:	80 5d       	subi	r24, 0xD0	; 208
    3a2a:	8a 33       	cpi	r24, 0x3A	; 58
    3a2c:	0c f0       	brlt	.+2      	; 0x3a30 <itoa+0x2c>
    3a2e:	89 5d       	subi	r24, 0xD9	; 217
    3a30:	81 93       	st	Z+, r24
    3a32:	cb 01       	movw	r24, r22
    3a34:	00 97       	sbiw	r24, 0x00	; 0
    3a36:	a1 f7       	brne	.-24     	; 0x3a20 <itoa+0x1c>
    3a38:	16 f4       	brtc	.+4      	; 0x3a3e <itoa+0x3a>
    3a3a:	5d e2       	ldi	r21, 0x2D	; 45
    3a3c:	51 93       	st	Z+, r21
    3a3e:	10 82       	st	Z, r1
    3a40:	c9 01       	movw	r24, r18
    3a42:	0c 94 23 1d 	jmp	0x3a46	; 0x3a46 <strrev>

00003a46 <strrev>:
    3a46:	dc 01       	movw	r26, r24
    3a48:	fc 01       	movw	r30, r24
    3a4a:	67 2f       	mov	r22, r23
    3a4c:	71 91       	ld	r23, Z+
    3a4e:	77 23       	and	r23, r23
    3a50:	e1 f7       	brne	.-8      	; 0x3a4a <strrev+0x4>
    3a52:	32 97       	sbiw	r30, 0x02	; 2
    3a54:	04 c0       	rjmp	.+8      	; 0x3a5e <strrev+0x18>
    3a56:	7c 91       	ld	r23, X
    3a58:	6d 93       	st	X+, r22
    3a5a:	70 83       	st	Z, r23
    3a5c:	62 91       	ld	r22, -Z
    3a5e:	ae 17       	cp	r26, r30
    3a60:	bf 07       	cpc	r27, r31
    3a62:	c8 f3       	brcs	.-14     	; 0x3a56 <strrev+0x10>
    3a64:	08 95       	ret

00003a66 <__udivmodhi4>:
    3a66:	aa 1b       	sub	r26, r26
    3a68:	bb 1b       	sub	r27, r27
    3a6a:	51 e1       	ldi	r21, 0x11	; 17
    3a6c:	07 c0       	rjmp	.+14     	; 0x3a7c <__udivmodhi4_ep>

00003a6e <__udivmodhi4_loop>:
    3a6e:	aa 1f       	adc	r26, r26
    3a70:	bb 1f       	adc	r27, r27
    3a72:	a6 17       	cp	r26, r22
    3a74:	b7 07       	cpc	r27, r23
    3a76:	10 f0       	brcs	.+4      	; 0x3a7c <__udivmodhi4_ep>
    3a78:	a6 1b       	sub	r26, r22
    3a7a:	b7 0b       	sbc	r27, r23

00003a7c <__udivmodhi4_ep>:
    3a7c:	88 1f       	adc	r24, r24
    3a7e:	99 1f       	adc	r25, r25
    3a80:	5a 95       	dec	r21
    3a82:	a9 f7       	brne	.-22     	; 0x3a6e <__udivmodhi4_loop>
    3a84:	80 95       	com	r24
    3a86:	90 95       	com	r25
    3a88:	bc 01       	movw	r22, r24
    3a8a:	cd 01       	movw	r24, r26
    3a8c:	08 95       	ret

00003a8e <_exit>:
    3a8e:	f8 94       	cli

00003a90 <__stop_program>:
    3a90:	ff cf       	rjmp	.-2      	; 0x3a90 <__stop_program>
